<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MyCoon</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Nov 2016 11:32:06 -0500</pubDate>
    <lastBuildDate>Sun, 27 Nov 2016 11:32:06 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>NP-Complete Problems</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Search Problems

&lt;ol&gt;
&lt;li&gt;Satisfiability Problem (SAT)&lt;/li&gt;
&lt;li&gt;Traveling Salesman Problem (TSP)&lt;/li&gt;
&lt;li&gt;Integer Linear Programming (ILP)

&lt;ul&gt;
&lt;li&gt;Zero-One Equations (ZOE)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Three-Dimensional Matching (3D Matching)&lt;/li&gt;
&lt;li&gt;Independent Set&lt;/li&gt;
&lt;li&gt;Clique&lt;/li&gt;
&lt;li&gt;Knapsack Problem&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;NP-Complete Problems&lt;/li&gt;
&lt;li&gt;Reductions

&lt;ol&gt;
&lt;li&gt;Generalization/Special Case&lt;/li&gt;
&lt;li&gt;Rudrata Path -&amp;gt; Rudrata Cycle&lt;/li&gt;
&lt;li&gt;3SAT -&amp;gt; Independent Set&lt;/li&gt;
&lt;li&gt;SAT -&amp;gt; 3SAT&lt;/li&gt;
&lt;li&gt;Independent Set -&amp;gt; Vertex Cover&lt;/li&gt;
&lt;li&gt;Independent Set -&amp;gt; Clique&lt;/li&gt;
&lt;li&gt;3SAT -&amp;gt; 3D Matching&lt;/li&gt;
&lt;li&gt;3D Matching -&amp;gt; ZOE&lt;/li&gt;
&lt;li&gt;ZOE -&amp;gt; Subset Sum&lt;/li&gt;
&lt;li&gt;ZOE -&amp;gt; Rudrata Cycle&lt;/li&gt;
&lt;li&gt;Rudrata Cycle -&amp;gt; TSP&lt;/li&gt;
&lt;li&gt;Any Problem in NP -&amp;gt; SAT&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Search Problems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Components

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Instance I&lt;/strong&gt;: input data specifying the problem&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution S&lt;/strong&gt;: object meeting particular specification&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Algorithm C&lt;/strong&gt; s.t. &lt;code&gt;C(I,S) = true&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;S&lt;/code&gt; is a solution to &lt;code&gt;I&lt;/code&gt;; &lt;em&gt;quick checking&lt;/em&gt; &amp;lt;=&amp;gt; &lt;code&gt;C&lt;/code&gt; runs in polynomial-time in &lt;code&gt;|I|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Can be reduced to/from &lt;strong&gt;optimization problems&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Satisfiability Problem (SAT)&lt;/h4&gt;

&lt;p&gt;Boolean formula in conjunctive normal form (CNF), find a set of assignments s.t. every clause contains a literal that is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Traveling Salesman Problem (TSP)&lt;/h4&gt;

&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; vertices and all connected with a cost &lt;code&gt;c&lt;/code&gt;, find a permutation of vertices s.t. the total cost is at most the budget &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search problem is polynomial-time checkable:

&lt;ul&gt;
&lt;li&gt;Each vertex is visited exactly once&lt;/li&gt;
&lt;li&gt;Total cost &amp;lt;= &lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CANNOT check optimality

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary search&lt;/strong&gt; to find optimum cost&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Integer Linear Programming (ILP)&lt;/h4&gt;

&lt;p&gt;Given a set of linear inequalities &lt;code&gt;Ax ≤ b&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an &lt;code&gt;m × n&lt;/code&gt; matrix and &lt;code&gt;b&lt;/code&gt; is an &lt;code&gt;m-vector&lt;/code&gt;; an objective function specified by an &lt;code&gt;n-vector&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;; and finally, a goal &lt;code&gt;g&lt;/code&gt;. Find a nonnegative integer &lt;code&gt;n-vector&lt;/code&gt; &lt;code&gt;x&lt;/code&gt; such that &lt;code&gt;Ax ≤ b&lt;/code&gt; and &lt;code&gt;cx ≥ g&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;Zero-One Equations (ZOE)&lt;/h5&gt;

&lt;p&gt;Find a vector &lt;code&gt;x&lt;/code&gt; of 0&amp;#39;s and 1&amp;#39;s satisfying &lt;code&gt;Ax = 1&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an &lt;code&gt;m × n&lt;/code&gt; matrix with 0−1 entries and &lt;code&gt;1&lt;/code&gt; is the &lt;code&gt;m-vector&lt;/code&gt; of all 1&amp;#39;s.&lt;/p&gt;

&lt;h4&gt;Three-Dimensional Matching (3D Matching)&lt;/h4&gt;

&lt;p&gt;Find a matching (&lt;code&gt;n&lt;/code&gt; disjoint edges) between 3 sets of &lt;code&gt;n&lt;/code&gt; nodes.&lt;/p&gt;

&lt;h4&gt;Independent Set&lt;/h4&gt;

&lt;p&gt;Given a graph and an integer &lt;code&gt;g&lt;/code&gt;, find &lt;code&gt;g&lt;/code&gt; vertices that are independent, i.e. no edges between them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dual: &lt;strong&gt;vertex cover&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Special case of &lt;strong&gt;set cover&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Clique&lt;/h4&gt;

&lt;p&gt;Given a graph and a goal &lt;code&gt;g&lt;/code&gt;, find a set of &lt;code&gt;g&lt;/code&gt; vertices such that the induced subgraph is complete.&lt;/p&gt;

&lt;h4&gt;Knapsack Problem&lt;/h4&gt;

&lt;p&gt;Given integer weights &lt;code&gt;w1,...,wn&lt;/code&gt; and integer values &lt;code&gt;v1, ..., vn&lt;/code&gt; for &lt;code&gt;n&lt;/code&gt; items. Find a set of items with total weight &amp;lt;= &lt;code&gt;W&lt;/code&gt; and total value &amp;gt;= &lt;code&gt;g&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unary knapsack&lt;/strong&gt;: encode integers in unary&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subset sum&lt;/strong&gt;: item&amp;#39;s value equals its weight

&lt;ul&gt;
&lt;li&gt;Find a subset of items that adds up to exactly &lt;code&gt;W&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;NP-Complete Problems&lt;/h2&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;Hard problems (NP-complete)&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Easy problems (in P)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;3SAT&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;2SAT, HORN SAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;TRAVELING SALESMAN PROBLEM&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;MINIMUM SPANNING TREE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;LONGEST PATH&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;SHORTEST PATH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;3D MATCHING&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;BIPARTITE MATCHING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;KNAPSACK&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;UNARY KNAPSACK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;INDEPENDENT SET&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;INDEPENDENT SET on trees&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;INTEGER LINEAR PROGRAMMING&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;LINEAR PROGRAMMING&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;RUDRATA PATH&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;EULER PATH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;BALANCED CUT&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;MINIMUM CUT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;NP-complete problems can be reduced to/from any of the others.&lt;/p&gt;

&lt;h4&gt;P, NP, NP-Complete&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NP&lt;/strong&gt;: class of search problems s.t. any proposed solution can be quickly checked for correctness&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;: class of search problems that can be solved in polynomial time, and correctly reports no solution if so&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NP-complete&lt;/strong&gt;: search problem where all other search problems reduce to it&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|--------NP-------|
|P|...|NP-complete|
      |-------NP Hard-------|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Reductions&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# f, h are polynomial transformation algorithms

    |----------------Algorithm for A-----------------|
I ---&amp;gt; f --f(I)--&amp;gt; Algorithm for B --S of f(I)--&amp;gt; h --&amp;gt; h(S) of I
                                   -------------------&amp;gt; No solution to I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Reduction from A to B:
    A --&amp;gt; B
If we know A is hard, then B is hard as well. All problems in NP reduce to B via A.

If A --&amp;gt; B and B --&amp;gt; C, then A --&amp;gt; C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;                                All NP
                                   |
                                  SAT
                                   |
                                  3SAT
                                  ⬋  ⬊
                    Independent Set  3D Matching
                        ⬋  ⬊            |
            Vertex Cover    Clique     ZOE
                                     ⬋  |  ⬊
                            Subset Sum ILP Rudrata Cycle
                                                |
                                               TSP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Generalization/Special Case&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Circuit SAT&lt;/strong&gt; is a generalization of &lt;strong&gt;SAT&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SAT&lt;/strong&gt; is a generalization of &lt;strong&gt;3SAT&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set cover&lt;/strong&gt; is a generalization of &lt;strong&gt;vertex cover&lt;/strong&gt; and &lt;strong&gt;3D matching&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ILP&lt;/strong&gt; is a generatlization of &lt;strong&gt;ZOE&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Rudrata Path -&amp;gt; Rudrata Cycle&lt;/h4&gt;

&lt;p&gt;Given a graph, is there a path starting at s and ending at t that goes through each vertex exactly once?&lt;br&gt;
-&amp;gt; Is there a cycle that passes through each vertex exactly once?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce &lt;code&gt;G&lt;/code&gt; in rudrata path to &lt;code&gt;G&amp;#39;&lt;/code&gt; in rudrata cycle:

&lt;ul&gt;
&lt;li&gt;Add vertex &lt;code&gt;x&lt;/code&gt; and edges &lt;code&gt;(s,x)&lt;/code&gt;, &lt;code&gt;(x,t)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;3SAT -&amp;gt; Independent Set&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt; Graph &lt;code&gt;G&lt;/code&gt; has a triangle for each clause (or an edge if clause of two literals), with vertices labeled by the clause&amp;#39;s literals&lt;/li&gt;
&lt;li&gt;Add edges between any two vertices that represent opposite literals&lt;/li&gt;
&lt;li&gt;Goal &lt;code&gt;g&lt;/code&gt; is the number of clauses&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;SAT -&amp;gt; 3SAT&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt; Any clause with &amp;gt; 3 literals in instance &lt;code&gt;I&lt;/code&gt; of SAT, transform:&lt;br&gt;
&lt;code&gt;(a1 ∨ a2 ∨ ... ∨ ak)  -&amp;gt; (a1 ∨ a2 ∨ y1)(~y1 ∨ a3 ∨ y2)...(~yk−3 ∨ ak−1 ∨ ak)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Further restriction: no variable appears in &lt;code&gt;k&lt;/code&gt; &amp;gt; 3 clauses

&lt;ul&gt;
&lt;li&gt;Replace variable &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;x1, x2, ..., xk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add clauses &lt;code&gt;(~x1 ∨ x2)(~x2 ∨ x3)...(~xk ∨ x1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Independent Set -&amp;gt; Vertex Cover&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Independent set &lt;code&gt;S&lt;/code&gt;, vertex cover &lt;code&gt;V - S&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Independent Set -&amp;gt; Clique&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Map instance &lt;code&gt;(G, g)&lt;/code&gt; of independent set to complement graph &lt;code&gt;(~G, g)&lt;/code&gt; of clique&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;3SAT -&amp;gt; 3D Matching&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cs.cmu.edu/%7Eckingsf/bioinfo-lectures/3dm.pdf&quot;&gt;CMU Notes&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;3D Matching -&amp;gt; ZOE&lt;/h4&gt;

&lt;p&gt;Given an &lt;code&gt;m × n&lt;/code&gt; matrix &lt;code&gt;A&lt;/code&gt; with 0−1 entries, and we must find a 0−1
vector &lt;code&gt;x = (x1, ..., xn)&lt;/code&gt; such that the &lt;code&gt;m&lt;/code&gt; equations &lt;code&gt;Ax = 1&lt;/code&gt; are satisfied.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let columns of &lt;code&gt;A&lt;/code&gt; be triples in 3D matching&lt;/li&gt;
&lt;li&gt;Let rows of &lt;code&gt;A&lt;/code&gt; be all matching items&lt;/li&gt;
&lt;li&gt;Aij is 1 if the triple inclues the item&lt;/li&gt;
&lt;li&gt;Choose a set of triples &lt;code&gt;X&lt;/code&gt; to be 1 s.t. the resulting column is all 1 (i.e. all items chosen once)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;ZOE -&amp;gt; Subset Sum&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Let columns of &lt;code&gt;A&lt;/code&gt; be representations of (n+1)-ary integers&lt;/li&gt;
&lt;li&gt;Choose a set of integers s.t. sum is 11...1 (won&amp;#39;t be affected by &lt;em&gt;carry&lt;/em&gt; because base &lt;code&gt;n+1&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;ZOE -&amp;gt; ILP&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;Ax ≤ b&lt;/code&gt;, rewrite each equation as 2 inequalities&lt;/li&gt;
&lt;li&gt;Add for each variable &lt;code&gt;xi&lt;/code&gt; inequalities &lt;code&gt;xi ≤ 1&lt;/code&gt; and &lt;code&gt;−xi ≤ 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;ZOE -&amp;gt; Rudrata Cycle&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ZOE -&amp;gt; Rudrata cycle with paired edges&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each variable &lt;code&gt;xi&lt;/code&gt; =&amp;gt; two parallel edges (xi = 1 and 0)&lt;/li&gt;
&lt;li&gt;Each equation &lt;code&gt;xj1 + ... + xjk = 1&lt;/code&gt;involving &lt;code&gt;k&lt;/code&gt; variables =&amp;gt; &lt;code&gt;k&lt;/code&gt; parallel edges&lt;/li&gt;
&lt;li&gt;Every equation and every variable xi appearing in it, add to &lt;code&gt;C&lt;/code&gt; the pair &lt;code&gt;(e,e&amp;#39;)&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt; = the edge &lt;code&gt;xi&lt;/code&gt; in that equation, &lt;code&gt;e&amp;#39;&lt;/code&gt; = the edge xi = 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rudrata cycle with paired edges -&amp;gt; Rudrata cycle&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace every pair &lt;code&gt;(e,e&amp;#39;)&lt;/code&gt; as &lt;code&gt;({a,b},{c,t})&lt;/code&gt;with:
&lt;img src=&quot;http://i40.tinypic.com/1pfazb.png&quot; alt=&quot;gadget&quot;&gt;&lt;/li&gt;
&lt;li&gt;Every other pair involving &lt;code&gt;{a,b}&lt;/code&gt;, set it to be &lt;code&gt;{a,f}&lt;/code&gt; and repeat the replacement&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Rudrata Cycle -&amp;gt; TSP&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; = set of cities&lt;/li&gt;
&lt;li&gt;Distance between &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; if &lt;code&gt;{u,v}&lt;/code&gt; is an edge; otherwise &lt;code&gt;1 + α&lt;/code&gt; for some &lt;code&gt;α &amp;gt; 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Budget = &lt;code&gt;|V|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;α = 1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;TSP satisfies triangle inequality &lt;code&gt;dij + djk ≥ dik&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Can be approximated&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;α&lt;/code&gt; is large

&lt;ul&gt;
&lt;li&gt;Solution either has cost &lt;code&gt;n&lt;/code&gt; or less, or has cost at least &lt;code&gt;n + α&lt;/code&gt; (&lt;strong&gt;gap property&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Any Problem in NP -&amp;gt; SAT&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Circuit SAT&lt;/p&gt;

&lt;p&gt;Given a circuit, find a truth assignment for the unknown inputs s.t. the output gate evaluates to T, or report that no such assignment exists.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;- AND/OR gates: indegree 2
- NOT gates: indegree 1
- Known input gates: no incoming edges, labeled F/T
- Unknown input gates: no incoming edges, labeled '?'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;SAT -&amp;gt; Circuit SAT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clause: OR of literals&lt;/li&gt;
&lt;li&gt;Joining clauses: AND of clauses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Circuit SAT -&amp;gt; SAT&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;T: g
F: ~g
OR: (g v ~h1)(g v ~h2)(~g v h1 v h2)
AND: (~g v h1)(~g v h2)(g v ~h1 v ~h2)
NOT: (g v h)(~g v ~h)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any Problem in NP -&amp;gt; Circuit SAT&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem in NP is a search problem &lt;code&gt;A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Solution checking is polynomial-time&lt;/li&gt;
&lt;li&gt;Polynomial algorithm can be rendered as a circuit&lt;/li&gt;
&lt;li&gt;Given instance &lt;code&gt;I&lt;/code&gt; and solution &lt;code&gt;S&lt;/code&gt; of problem &lt;code&gt;A&lt;/code&gt;, construct a polynomial-time circuit with known inputs the bits of &lt;code&gt;I&lt;/code&gt;, unknown inputs the bits of &lt;code&gt;S&lt;/code&gt; s.t. output is T&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fas.harvard.edu/%7Elibcs124/CS/lec7.pdf&quot;&gt;Harvard Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1857244/what-are-the-differences-between-np-np-complete-and-np-hard&quot;&gt;What are the differences between NP, NP-complete, and NP-hard?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mlnotes.com/2013/04/29/npc.html&quot;&gt;mlnotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://staff.ustc.edu.cn/%7Ecsli/graduate/algorithms/book6/chap36.htm&quot;&gt;USTC Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 26 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/algorithm/2016/11/26/np-complete-problems.html</link>
        <guid isPermaLink="true">/blog/notes/algorithm/2016/11/26/np-complete-problems.html</guid>
        
        <category>np-complete</category>
        
        <category>algorithm</category>
        
        <category>CSC373</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Algorithm</category>
        
      </item>
    
      <item>
        <title>Linear Programming</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Linear Programming &amp;amp; Reduction Overview&lt;/li&gt;
&lt;li&gt;Duality&lt;/li&gt;
&lt;li&gt;Simplex Algorithm&lt;/li&gt;
&lt;li&gt;Circuit Evaluation&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Linear Programming &amp;amp; Reduction Overview&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;LP &amp;amp; Reductions ---&amp;gt; Flows &amp;amp; matching
                ---&amp;gt; Duality            ---&amp;gt; Games
                ---&amp;gt; Simplex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Linear Programming&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Objective function

&lt;ul&gt;
&lt;li&gt;Line&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maximization&lt;/strong&gt; or &lt;strong&gt;minimization&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Constraints

&lt;ul&gt;
&lt;li&gt;Feasible region&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Equations&lt;/strong&gt; or &lt;strong&gt;inequalities&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Optimum achieved at a &lt;strong&gt;vertex of feasible region&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplex method&lt;/strong&gt;: &lt;em&gt;hill-climbing&lt;/em&gt; on vertices

&lt;ul&gt;
&lt;li&gt;Local = global optimality for linear functions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Reduction&lt;/h4&gt;

&lt;p&gt;If any subroutine for task Q can also be used to solve P, we say &lt;strong&gt;P reduces to Q&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;x ---&amp;gt; Preprocess --y-&amp;gt; Algorithm for Q --Q(y)--&amp;gt; Postprocess ---&amp;gt; P(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Variants of Linear Programming&lt;/h4&gt;

&lt;p&gt;Reduction of variants into &lt;em&gt;standard form&lt;/em&gt;:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maximization to minimization:

&lt;ul&gt;
&lt;li&gt;Coefficients * (-1)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inequality to equation:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum_i_to_n(ai*xi) &amp;lt;= b&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;sum_i_to_n(ai*xi) + s &amp;lt;= b &amp;amp;&amp;amp; s &amp;gt;= 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; = slack variable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Equation to inequality:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ax = b&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;ax &amp;lt;= b &amp;amp;&amp;amp; ax &amp;gt;= b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unsigned variables to signed:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; &amp;lt;=&amp;gt; &lt;code&gt;x+ - x-&lt;/code&gt; where &lt;code&gt;x+, x- &amp;gt;= 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;min cTx s.t. Ax = b and x ≥ 0&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Matrix-Vector Notation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Objective function:
    c^Tx
    c = [c1, c2, ...], x = [x1, x2, ...]
Constraints:
    Ax &amp;lt;= b
    A = [[c11, c12, ...], [c21, c22, ...], ...], b = [b1, b2, ...]
x &amp;gt;= 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Duality&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Primal LP:
max cTx 
Ax ≤ b 
x ≥ 0

# Dual LP:
min yTb 
yTA ≥ cT 
y ≥ 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Primal LP:
max c1x1 +···+cnxn 
ai1x1+···+ainxn ≤ bi for i ∈ I (inequalities)
ai1x1+···+ainxn = bi for i ∈ E (equalities)
xj ≥ 0 for j ∈ N

# Dual LP:
min b1y1 +···+bmym 
a1jy1+···+amjym ≥ cj for j ∈ N 
a1jy1+···+amjym = cj for j !∈ N 
yi ≥ 0 for i ∈ I # equalities can have unrestricted variables (signed)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Duality Theorm&lt;/h4&gt;

&lt;p&gt;If a linear program has a bounded optimum, then so does its dual, and the two optimum values coincide.&lt;/p&gt;

&lt;h4&gt;Duality in Shortest-Path Problem&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://math.stackexchange.com/questions/861079/shortest-path-problem-dual-formulation-and-proof-of-total-unimodularity&quot;&gt;StackExchange&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Shortest_path_problem#Linear_programming_formulation&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;max xs - xt
|xu - xv| &amp;lt;= w_uv for all edges {u,v}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Simplex Algorithm&lt;/h2&gt;

&lt;h4&gt;Visualization&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;let v be any vertex of the feasible region
while there is a neighbor v' of v with better objective value:
    set v = v'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;x1, ..., xn variables -&amp;gt; n-tuple in n-dimensional space
A linear equation     -&amp;gt; hyperplane in R^n
A linear inequality   -&amp;gt; half-space in R^n
Linear program        -&amp;gt; convex polyhedron in R^n; intersection of all half-spaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Vertex: 
    Pick a subset of the inequalities. A vertex is a unique point that satisfies them with equality, and this point happens to be feasible.

Each vertex is specified by a set of n inequalities. (n linear equations to uniquely identify a point)

Neighbor:
    Two vertices are neighbors if they have n-1 defining inequalities in common.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Algorithm&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;max cTx 
Ax ≤ b 
x ≥ 0

1. Set origin to be current vertex.
2. Check whether the current vertex is optimal, i.e. coordinates of local cost vector (c) all &amp;lt;= 0.
3. If so, halt. Else, determine where to move next by increasing some xi for which ci &amp;gt; 0 until we hit some other constraint.
4. Transform the next vertex into origin and repeat.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Transformation into Origin&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;For inequality ai*x ≤ bi, to turn into yi ≥ 0:
    yi = bi - ai*x

Cost function:
    max cu + (c')^T y, cu = value of objective function at u, c' = transformed cost vector
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Issues&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How to find the starting vertex?&lt;/p&gt;

&lt;p&gt;General LPs won&amp;#39;t always have inequalities with positive right-hand sides.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;1. Rewrite LP into standard form:
    min cTx s.t. Ax = b and x ≥ 0
2. Make sure right-hand sides of equations are nonnegative:
    if bi &amp;lt; 0, multiply both sides of the ith equation by -1
3. Create new LP:
    - Create m new artificial variables z1, ..., zm &amp;gt;= 0
    - Add zi to left-hand side of the ith equation
    - Objective function: minimize z1+...+zm
4. Starting vertex for new LP:
    zi = bi for all i, other variables 0
5. Run simplex on new LP

If zi+...+zm = 0:
    Optimum vertex of new LP = starting feasible vertex of original LP
Else:
    Original LP not feasible
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Degeneracy?&lt;/p&gt;

&lt;p&gt;An LP is &lt;strong&gt;degenerate&lt;/strong&gt; if in a basic feasible solution, one of the basic variables takes on a zero value.&lt;/p&gt;

&lt;p&gt;In geometry, this means there is an intersection of more than &lt;code&gt;n&lt;/code&gt; faces of the polyhedron.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem:

&lt;ul&gt;
&lt;li&gt;May return &lt;strong&gt;suboptimal&lt;/strong&gt; degenerate vertex, because all neighbors are identical and no better objective&lt;/li&gt;
&lt;li&gt;May &lt;strong&gt;loop forever&lt;/strong&gt;, bacause if modify simplex, continue to hop from vertex to vertex without improvement&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Perturbation&lt;/strong&gt;: change each &lt;code&gt;bi&lt;/code&gt; by a tiny random amount to &lt;code&gt;bi += εi&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unboundedness?&lt;/p&gt;

&lt;p&gt;Objective function can be arbitrarily large/small.  &lt;/p&gt;

&lt;p&gt;Simplex will discover it: when exploring the neighborhood of a vertex, taking out an inequality and adding another leads to underdetermined system of equations that has infinite solutions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Running Time&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Generic LP:
    max cTx s.t. Ax ≤ 0 and x ≥ 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;A vertex is where &lt;code&gt;n&lt;/code&gt; inequality constraints are satisfied with equality&lt;/li&gt;
&lt;li&gt;Each of its neighbors shares &lt;code&gt;n-1&lt;/code&gt; inequalities =&amp;gt; &lt;code&gt;n * m&lt;/code&gt; neighbors&lt;/li&gt;
&lt;li&gt;Finding cost &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Checking whether is a true vertex - solving &lt;code&gt;n&lt;/code&gt; equations in &lt;code&gt;n&lt;/code&gt; unknowns:

&lt;ul&gt;
&lt;li&gt;Gaussian elimination &lt;code&gt;O(n^3)&lt;/code&gt; =&amp;gt; total &lt;code&gt;O(nb^4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;move to origin&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O((m+n)n)&lt;/code&gt; overhead to rewrite&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max cu + (c&amp;#39;)^T y&lt;/code&gt;, pick any &lt;code&gt;c&amp;#39;i &amp;gt; 0&lt;/code&gt; to move to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(mn)&lt;/code&gt; in total&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C(m+n,n)&lt;/code&gt; vertices =&amp;gt; upper bound on # of iterations&lt;/li&gt;
&lt;li&gt;So &lt;strong&gt;simplex is exponential&lt;/strong&gt;; but in practice not exponential&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Gaussian Elimination&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Gauss(E,X):
    # Input: A system E = {e1,...,en} of equations in n unknowns X = {x1,...,xn}:
    e1: a11x1 + a12x2 +···+ a1nxn = b1; ···; en: an1x1 + an2x2 +···+ annxn = bn 
    # Output: A solution of the system, if one exists

    if all coefficients ai1 are zero:
        halt with message &quot;either infeasible or not linearly independent&quot;
    if n = 1: return b1/a11

    choose the coefficient ap1 of largest magnitude, and swap equations e1, ep 
    for i = 2 to n:
        ei = ei  − (ai1/a11) * e1
    (x2, . . . , xn) = Gauss(E − {e1}, X − {x1}) 
    x1 = (b1 − sum_j&amp;gt;1(a1j * xj))/a11

    return (x1,...,xn)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Circuit Evaluation&lt;/h2&gt;

&lt;p&gt;The most general problem solvable in polynomial time.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|true| xg = 1
|false| xg = 0
|OR|  &amp;lt;- h   xg &amp;gt;= xh, xg &amp;gt;= xh'
      &amp;lt;- h'  xg &amp;lt;= xh + xh'
|AND| &amp;lt;- h   xg &amp;lt;= xh, xg &amp;lt;= xh'
      &amp;lt;- h'  xg &amp;gt;= xh + xh' - 1
|NOT| &amp;lt;- h   xg = 1 - xh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.utdallas.edu/%7Escniu/OPRE-6201/documents/LP4-Simplex.html&quot;&gt;The Simplex Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.yale.edu/homes/aspnes/pinewiki/LinearProgramming.html&quot;&gt;Yale LP Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pitt.edu/%7Ekaveh/Lin-programming-notes.pdf&quot;&gt;Pitt LP Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://courses.csail.mit.edu/6.854/06/scribe/s15.pdf&quot;&gt;MIT LP Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://home.ubalt.edu/ntsbarsh/opre640a/partIII.htm#rsppr&quot;&gt;UBalt Flow Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://neos-guide.org/content/diet-problem&quot;&gt;The Diet Problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/algorithm/2016/11/24/linear-programming.html</link>
        <guid isPermaLink="true">/blog/notes/algorithm/2016/11/24/linear-programming.html</guid>
        
        <category>linear programming</category>
        
        <category>algorithm</category>
        
        <category>CSC373</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Algorithm</category>
        
      </item>
    
      <item>
        <title>Serverside Swift</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Basics

&lt;ol&gt;
&lt;li&gt;Terminologies&lt;/li&gt;
&lt;li&gt;Commands&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Images

&lt;ol&gt;
&lt;li&gt;Image Types&lt;/li&gt;
&lt;li&gt;Create Images&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Compose

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Application&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Create Swift Package&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;swift package init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;swift build&lt;/code&gt;&lt;br&gt;
&lt;code&gt;swift package generate-xcodeproj&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Package.swift&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;name: name of package
targets: binary files
dependencies: [
  .Package(url: &quot;url&quot;, majorVersion: version, minor: version)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Swift Basics&lt;/h2&gt;

&lt;h5&gt;Strongly-Typed&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;var myVar = &amp;quot;string&amp;quot;&lt;/code&gt; or &lt;code&gt;var myVar: String&lt;/code&gt;&lt;br&gt;
&lt;code&gt;var myInt = Int(myVar)&lt;/code&gt; or &lt;code&gt;var myInt = (myVar as NSString).integerValue&lt;/code&gt;  &lt;/p&gt;

&lt;h5&gt;Constants &amp;amp; Variables&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;let const = value&lt;/code&gt; vs &lt;code&gt;var const = value&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;Class&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// unnamed parameter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myStaticFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// named parameter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;myStaticFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Building Swift Applicstions&lt;/h2&gt;

&lt;h4&gt;Targets&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Library&lt;/li&gt;
&lt;li&gt;Executable (terminal-like icon)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Settings&lt;/h4&gt;

&lt;p&gt;Target &amp;gt; Edit Scheme &amp;gt; Run &amp;gt; Options &amp;gt; Use custom working directory: [project-directory]&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/swift/2016/11/24/serverside-swift.html</link>
        <guid isPermaLink="true">/blog/notes/swift/2016/11/24/serverside-swift.html</guid>
        
        <category>swift</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Operating System - Paging</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Introduction to Virtual Memory&lt;/li&gt;
&lt;li&gt;Paging MMU&lt;/li&gt;
&lt;li&gt;Page Tables&lt;/li&gt;
&lt;li&gt;Translation Lookaside Buffer (TLB)&lt;/li&gt;
&lt;li&gt;Memory Protection&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Introduction to Virtual Memory&lt;/h2&gt;

&lt;h4&gt;Problems with Contiguous Memory&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Growing program requires copying entire program&lt;/li&gt;
&lt;li&gt;Wasted memory due to &lt;strong&gt;internal &amp;amp; external fragmentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Running program requires loading entire program&lt;/li&gt;
&lt;li&gt;Max program size limited by memory size&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Paging MMU&lt;/h2&gt;

&lt;h4&gt;Pages &amp;amp; Frames&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page&lt;/strong&gt;: contiguous, fixed size chunks in virtual address space&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frame&lt;/strong&gt;: physical memory mapped from a page&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Virtual &amp;amp; Physical Addresses&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# 32-bit machine, virtual address space 2^32 B
# page size 2^12, # of pages 2^20
|...20 bits...|.12 bits.|
    page num     offset

# e.g. physical address space 2^30 B
# frame size 2^12, # of frames 2^18
|...18 bits...|.12 bits.|
    page num     offset

               VA               PA
          -----------&amp;gt;     -----------&amp;gt;
Processor              MMU              Bus
          &amp;lt;----------------------------
                       data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Benefits of Paging&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Growing program requires allocating a page at a time&lt;/li&gt;
&lt;li&gt;No external fragmentation (page granularity); internal fragmentation 1/2 page per region&lt;/li&gt;
&lt;li&gt;Pages can be loaded in memory as program runs&lt;/li&gt;
&lt;li&gt;Max program size limited by disk size&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Page Tables&lt;/h2&gt;

&lt;p&gt;Mapping information maintained by MMU.&lt;/p&gt;

&lt;h4&gt;Page Table Entries (PTE)&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|...18 bits...|.7 bits.|C|D|R|W|V|
   frame num    unused
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Storing Page Table&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Stored in memory

&lt;ul&gt;
&lt;li&gt;Each memory access requires 2 memory accesses: PTE &amp;amp; PA&lt;/li&gt;
&lt;li&gt;Solution: Cache PTE in TLB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page table register (PTR)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;For MMU to store the location of start of page table&lt;/li&gt;
&lt;li&gt;OS associates a seperate page table for each process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Address space switch&lt;/strong&gt; switches PTR&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Page Table Size&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;#pages * PTE size (typically word size)
= (va_size / page_size) * PTE size
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Smaller page size: lower internal fragmentation&lt;/li&gt;
&lt;li&gt;Larger page size: fewer PTE &amp;amp; memory overhead&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Multi-Level Page Table&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|.10 bits.|.10 bits.|.12 bits.|
    PT1       PT2      offset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Slower than &lt;em&gt;single-level page table&lt;/em&gt; because more memory accesses&lt;/li&gt;
&lt;li&gt;Saves space&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Inverted Page Table&lt;/h4&gt;

&lt;p&gt;Maps &lt;strong&gt;frame num -&amp;gt; (thread id, page num)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|....|...52 bits...|.12 bits.|
 TID    page num     offset
  |         |
  -----------
       |
   hash func ----&amp;gt; index into page table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Exhaustive search is slow

&lt;ul&gt;
&lt;li&gt;Use hash table indexed by page number&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hashing function needs to be good&lt;/li&gt;
&lt;li&gt;Poor cache locality

&lt;ul&gt;
&lt;li&gt;Adjacent pages hashed to scattered locations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sharing memory is complecated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Translation Lookaside Buffer (TLB)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;H/W cache of PTE

&lt;ul&gt;
&lt;li&gt;Small # of entries&lt;/li&gt;
&lt;li&gt;Exploits locality (program uses small # of pages at a time)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;|virtual page number (VPN)|...18 bits...|.7 bits.|C|D|R|W|V|
                             frame num    unused
|   key: page number      |             data: PTE          |

V: valid, W: writable, R: referenced (H/W), D: dirty (H/W), C: cacheable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;V: is the entry valid or not?&lt;br&gt;
W: is the page writable?&lt;br&gt;
C: is the page cacheable? when not cacheable, processor should bypass the cache when accessing the page, e.g., to access memory-mapped device registers&lt;br&gt;
D: has a writable page been written to (is it dirty with respect to the data on disk)?&lt;br&gt;
R: has a page been referenced?&lt;br&gt;
unused: unused by hardware, can be used by OS  &lt;/p&gt;

&lt;p&gt;H/W may or may not need execution bit, but instead use &lt;em&gt;read&lt;/em&gt; as &lt;em&gt;execute&lt;/em&gt;  &lt;/p&gt;

&lt;h4&gt;TLB Operations&lt;/h4&gt;

&lt;h5&gt;TLB Lookup&lt;/h5&gt;

&lt;p&gt;Fully associative TLB example  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cems.uwe.ac.uk/%7Ebr-gaster/courses/2015-2016/CNOS/lectures/reveal.js-jade/decks/cnos_lecture9/resources/tlb-lookup.png&quot; alt=&quot;TLB lookup&quot;&gt;&lt;/p&gt;

&lt;h5&gt;TLB cache miss handling&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;TLB lookup fails -&amp;gt; page table lookup -&amp;gt; TLB cache replaced (&lt;strong&gt;TLB replacement policy&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Handled by H/W or OS

&lt;ul&gt;
&lt;li&gt;H/W managed TLB

&lt;ul&gt;
&lt;li&gt;H/W defines page table format &amp;amp; replacement policy&lt;/li&gt;
&lt;li&gt;PTR to locate page table in physical memory&lt;/li&gt;
&lt;li&gt;Fast miss handling&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;S/W managed TLB

&lt;ul&gt;
&lt;li&gt;H/W generates trap called &lt;strong&gt;TLB miss fault&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read fault&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write fault&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OS handles TLB miss similar to exception handling&lt;/li&gt;
&lt;li&gt;OS figures out correct PTE, add in TLB (CPU has instructions to modify TLB)&lt;/li&gt;
&lt;li&gt;Page tables become entirely a OS data structure (no PTR in H/W, H/W doesn&amp;#39;t know about page table)&lt;/li&gt;
&lt;li&gt;TLB replacement policy managed in S/W&lt;/li&gt;
&lt;li&gt;Slower by more flexible miss handling&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;TLB cache invalidate&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Adds cost to context switching

&lt;ul&gt;
&lt;li&gt;Changing PTR + invalidating TLB + TLB misses afterwards&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Invalidate options

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clear TLB&lt;/strong&gt;: clearing valid bit of all entries&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tagged TLB&lt;/strong&gt;: H/W maintains &lt;strong&gt;id tag&lt;/strong&gt; on each entry

&lt;ul&gt;
&lt;li&gt;Compare current thread id (stored in register) to the tag&lt;/li&gt;
&lt;li&gt;No invalidation; enables space multiplexing of entries&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Memory Protection&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generate &lt;strong&gt;protection fault&lt;/strong&gt; if memory access inconsistent with protection bits

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read-only fault&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No-execute fault&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Related Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-is-the-differences-between-a-page-table-and-an-inverted-page-table&quot;&gt;What are the differences between a page table and an inverted page table?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/os/2016/11/22/operating-system-paging.html</link>
        <guid isPermaLink="true">/blog/notes/os/2016/11/22/operating-system-paging.html</guid>
        
        <category>OS</category>
        
        <category>ECE344</category>
        
        <category>paging</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>OS</category>
        
      </item>
    
      <item>
        <title>ReactJS Data Visualization Libraries in a Hack Night</title>
        <description>&lt;p&gt;At the hackathon last night, we were given a bunch of advertising data to work with so that data can be more understandable. I experimented with several React data visualization libraries, out of which I couldn&amp;#39;t really find a perfect one. I will share the experience working with the libraries, and what pros and cons I found.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;All versions of implementation and final demo can be found &lt;a href=&quot;https://github.com/pyliaorachel/hack-with-ix/tree/master&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically, below is just some subjective observations in a hack night, so there may be many mistakes in the description. I do appreciate any corrections!&lt;/p&gt;

&lt;h3&gt;react-chartjs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-chartjs&quot;&gt;react-chartjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pyliaorachel/hack-with-ix/blob/demo/ui/src/assets/react-chartjs.png?raw=true&quot; alt=&quot;react-chartjs&quot;&gt;&lt;/p&gt;

&lt;p&gt;The main problem is in its documentation, which seems to be fancy but are actually including too many information which is loosely distributed throughout the entire doc.&lt;/p&gt;

&lt;p&gt;Especially the &lt;code&gt;options&lt;/code&gt;, which determines the settings, style, scale, and all other important stuffs, are really messy and not working as expected. I searched through many examples but simply cannot get rid of the gray color in my chart. Discarded it because nobody wants such a chart with not-very-appealing look.&lt;/p&gt;

&lt;p&gt;But I really like that I can work out a formatted x-axis display value. This should be a basic functionality, but surprisingly not many libraries get this well.&lt;/p&gt;

&lt;h5&gt;Data Parsing&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;labels&lt;/code&gt; as x-axis or categories, &lt;code&gt;data&lt;/code&gt; in &lt;code&gt;datasets&lt;/code&gt; as y-axis or values.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// other options&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Purple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Pros&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;labels&lt;/code&gt; to represent x-axis, which is great that I can customize&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Cons&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Not providing a clear react version documentation but uses &lt;a href=&quot;http://www.chartjs.org/docs/&quot;&gt;chartjs&lt;/a&gt;&amp;#39;s instead, which I don&amp;#39;t really like because of the extensive information&lt;/li&gt;
&lt;li&gt;Demonstration page not clear with how the data look like&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t know why, but some of the &lt;code&gt;options&lt;/code&gt; are not working, and I can&amp;#39;t do the styling because of this&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;react-d3&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/esbullington/react-d3&quot;&gt;react-d3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pyliaorachel/hack-with-ix/blob/demo/ui/src/assets/react-d3.png?raw=true&quot; alt=&quot;react-d3&quot;&gt;&lt;/p&gt;

&lt;p&gt;The main problem is in data parsing.&lt;/p&gt;

&lt;p&gt;You need to go through the whole data and explicitly parse out the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in a &lt;code&gt;values&lt;/code&gt; array, which is most commonly done by simply setting the &lt;code&gt;field&lt;/code&gt; key in other libraries. This can be helpful if you want even more flexibility, but this is seldom the case.&lt;/p&gt;

&lt;p&gt;And again, where can I easily find the styling instructions? Miserable.&lt;/p&gt;

&lt;h5&gt;Data Parsing&lt;/h5&gt;

&lt;p&gt;Parse points as &lt;code&gt;x-y&lt;/code&gt; pairs in a &lt;code&gt;values&lt;/code&gt; array for coordinate charts.&lt;br&gt;
Parse categories as &lt;code&gt;label&lt;/code&gt; and values as &lt;code&gt;value&lt;/code&gt; for category charts.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lineData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;series1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strokeDashArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5,5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;series2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pieData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Margarita'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;55.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Pros&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Nice demonstration page, simple and clear&lt;/li&gt;
&lt;li&gt;Parse the x/y coordinates ourselves, which can be more flexible (but also a con)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Cons&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The styling instructions are somehow hidden deep in the documentation&lt;/li&gt;
&lt;li&gt;Need to parse the x/y coordinates ourselves, which is more tedious (but also a pro)&lt;/li&gt;
&lt;li&gt;Customize displayed x-/y-axis is not flexible enough (only found time on x-axis to be formattable, but the instructions are not clear)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;react-d3-basic&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/react-d3/react-d3-basic&quot;&gt;react-d3-basic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pyliaorachel/hack-with-ix/blob/demo/ui/src/assets/react-d3-basic.png?raw=true&quot; alt=&quot;react-d3-basic&quot;&gt;&lt;/p&gt;

&lt;p&gt;To be honest, I choose this as the final working version simply because I KNOW HOW TO STYLE IT. The documentation is the nice ever.&lt;/p&gt;

&lt;p&gt;The main problem is still in data parsing and non-customizable x-axis display value.&lt;/p&gt;

&lt;p&gt;Although the doc is nice, but the data are not especially shown, so I have to look for the &lt;code&gt;.csv&lt;/code&gt; files on github and found some missing. Not a big problem though, but a problem to hackers in hackathons.&lt;/p&gt;

&lt;p&gt;For the x-axis display values, it provides an &lt;code&gt;x&lt;/code&gt; function for you to map. But they are not actually intended for you to map displayed values but only actual values. So if you want the function to return a string representation of a date, it fails because only number values are allowed.&lt;/p&gt;

&lt;p&gt;And the bar-type charts yelled to me miserable errors for a missing &lt;code&gt;bandwidth&lt;/code&gt; function deep in the &lt;code&gt;chartjs&lt;/code&gt; package, probably because I used the bar charts to build some streaming charts. So be careful when implementing them.&lt;/p&gt;

&lt;h5&gt;Data Parsing&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;field&lt;/code&gt; for the y-axis filter. Argument in &lt;code&gt;x&lt;/code&gt; function is the data object itself, so be sure the datum is parsed in a way that have both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// sample data
[
  {
    total: 1,
    incineration: 1,
    garbageBury: 1,
    month: 1,
  },
  {
    total: 2,
    incineration: 2,
    garbageBury: 2,
    month: 2,
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartSeries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartSeries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'total'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Total'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'incineration'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Incineration'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'garbageBury'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Garbage Bury'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Pros&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Nice documentation, simple and clear&lt;/li&gt;
&lt;li&gt;Easy to style&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Cons&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Need more examples on how to parse the data for different charts&lt;/li&gt;
&lt;li&gt;Customized x-/y-axis is not flexible enough&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/tech/reactjs/2016/11/21/reactjs-data-visualization-libraries-in-a-hack-night.html</link>
        <guid isPermaLink="true">/blog/tech/reactjs/2016/11/21/reactjs-data-visualization-libraries-in-a-hack-night.html</guid>
        
        <category>react</category>
        
        <category>react-chartjs</category>
        
        <category>react-d3</category>
        
        <category>react-d3-basic</category>
        
        <category>data visualization</category>
        
        
        <category>Blog</category>
        
        <category>Tech</category>
        
        <category>ReactJS</category>
        
      </item>
    
      <item>
        <title>Docker Beginner</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Basics

&lt;ol&gt;
&lt;li&gt;Terminologies&lt;/li&gt;
&lt;li&gt;Commands&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Images

&lt;ol&gt;
&lt;li&gt;Image Types&lt;/li&gt;
&lt;li&gt;Create Images&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Compose

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Application&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Basics&lt;/h2&gt;

&lt;h3&gt;Terminologies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Images&lt;/strong&gt;: the &lt;strong&gt;file system and configuration of an application&lt;/strong&gt; used to &lt;strong&gt;create containers&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker inspect image-name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: &lt;strong&gt;running instances of Docker images&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Run the actual applications; includes an application and all of its dependencies &lt;/li&gt;
&lt;li&gt;Share the kernel with other containers&lt;/li&gt;
&lt;li&gt;Run as an isolated process in user space on the host OS &lt;/li&gt;
&lt;li&gt;A container created by &lt;code&gt;docker run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker daemon&lt;/strong&gt;: the background service running on the host that &lt;strong&gt;manages building, running and distributing Docker containers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker client&lt;/strong&gt;: the command line tool that allows the user to interact with the Docker daemon&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;: a registry of Docker images&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Commands&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker login&lt;/code&gt; login to docker hub&lt;br&gt;
&lt;code&gt;docker ps&lt;/code&gt; list current running containers&lt;br&gt;
    - &lt;code&gt;docker ps -a&lt;/code&gt; list containers ran before&lt;br&gt;
&lt;code&gt;docker images&lt;/code&gt; list images&lt;br&gt;
&lt;code&gt;docker pull image-name&lt;/code&gt; pull image from hub&lt;br&gt;
    - &lt;code&gt;image-name:version&lt;/code&gt; specify version e.g. &lt;code&gt;ubuntu:12.04&lt;/code&gt;, &lt;code&gt;ubuntu:latest&lt;/code&gt;
&lt;code&gt;docker push USERNAME/image-name&lt;/code&gt; push image to hub&lt;br&gt;
&lt;code&gt;docker run image-name [command]&lt;/code&gt; executes commands in container&lt;br&gt;
    - &lt;code&gt;docker pull&lt;/code&gt; if image not exists
    - &lt;code&gt;-it&lt;/code&gt; iterative mode; will not exit container&lt;br&gt;
    - &lt;code&gt;-d&lt;/code&gt; detached mode; detach running container from terminal
    - &lt;code&gt;-P&lt;/code&gt; publish all the exposed container ports to random ports on the Docker host
    - &lt;code&gt;-p&lt;/code&gt; specify port number e.g. &lt;code&gt;-p 8888:80&lt;/code&gt; link 8888 on container to 80 on host
    - &lt;code&gt;-e&lt;/code&gt; pass environment variables
        - e.g. &lt;code&gt;-e AUTHOR=&amp;quot;name&amp;quot;&lt;/code&gt;
    - &lt;code&gt;--name&lt;/code&gt; specify container name
&lt;code&gt;docker stop container-name&lt;/code&gt; stop running container&lt;br&gt;
&lt;code&gt;docker rm container1-name container2-name ...&lt;/code&gt; remove containers&lt;br&gt;
    - &lt;code&gt;-f&lt;/code&gt; remove running containers 
&lt;code&gt;docker port container-name&lt;/code&gt; port of running container
&lt;code&gt;docker search image-name&lt;/code&gt; search for images  &lt;/p&gt;

&lt;h2&gt;Docker Images&lt;/h2&gt;

&lt;h3&gt;Image Types&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Base images v.s. child images

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base image&lt;/strong&gt;: no parent images, usually images with an OS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Child image&lt;/strong&gt;: build on base images and add additional functionality&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Official images v.s. user images

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Official image&lt;/strong&gt;: no prefix&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User image&lt;/strong&gt;: &lt;code&gt;user/image-name&lt;/code&gt;; based on &lt;em&gt;base image&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Create Images&lt;/h3&gt;

&lt;h4&gt;Steps&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create an app&lt;/li&gt;
&lt;li&gt;Write a Dockerfile&lt;/li&gt;
&lt;li&gt;Build the image&lt;/li&gt;
&lt;li&gt;Run your image&lt;/li&gt;
&lt;li&gt;Dockerfile commands summary&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;List of commands the Docker daemon calls while creating an image.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Docker image to run from&lt;/li&gt;
&lt;li&gt;Location of your project code&lt;/li&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;li&gt;Commands to run at start-up&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# specify base image
FROM alpine:latest # username/imagename:version

# copying files &amp;amp; installing dependencies
RUN apk add --update py-pip # install Python pip package to the alpine linux distribution # RUN add new layers

# install required Python packages &amp;amp; copy files
COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt
COPY app.py /usr/src/app/
COPY templates/index.html /usr/src/app/templates/

# specify port number
EXPOSE 5000

# run application; one CMD per Dockerfile/Image
CMD [&quot;python&quot;, &quot;/usr/src/app/app.py&quot;] # which command to run by default when started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Build Images&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;docker build -t &amp;lt;USERNAME&amp;gt;/appname [path-to-dockerfile]&lt;/code&gt;&lt;br&gt;
    - &lt;code&gt;-t&lt;/code&gt; optional tag name&lt;/p&gt;

&lt;h2&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;Define &amp;amp; run multi-container apps.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Describe containers &amp;amp; volumes you want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./vote&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python app.py&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./vote:/app&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5000:80&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;front-tier&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./result&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodemon --debug server.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./result:/app&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5001:80&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5858:5858&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;front-tier&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./worker&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis:alpine&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgres:9.4&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;db-data:/var/lib/postgresql/data&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;db-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;front-tier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Networks&lt;/strong&gt;: containers can communicate with others in the same network&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Run Application&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt; start all containers in &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;br&gt;
    - &lt;code&gt;-d&lt;/code&gt; run in daemon mode in background&lt;/p&gt;

&lt;p&gt;Then build &amp;amp; push to hub.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/docker/2016/11/17/docker-beginner.html</link>
        <guid isPermaLink="true">/blog/notes/docker/2016/11/17/docker-beginner.html</guid>
        
        <category>docker</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>Shortest Path Algorithms</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Dijkstra&amp;#39;s Algorithm&lt;/li&gt;
&lt;li&gt;Bellman-Ford Algorithm&lt;/li&gt;
&lt;li&gt;Floyd–Warshall Algorithm&lt;/li&gt;
&lt;li&gt;Shortest Paths in DAGs&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Dijkstra&amp;#39;s Algorithm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/greedy-algorithms-set-6-dijkstras-shortest-path-algorithm/&quot;&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Only handles positive edges&lt;/li&gt;
&lt;li&gt;Need &lt;strong&gt;global information&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Similar to &lt;a href=&quot;http://www.geeksforgeeks.org/greedy-algorithms-set-5-prims-minimum-spanning-tree-mst-2/&quot;&gt;Prim&amp;#39;s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Dijkstra(G, l, s):
# Input: Graph G = (V, E), directed or undirected;
         positive edge lengths {le : e ∈ E}; vertex s ∈ V
# Output: For all vertices u reachable from s, dist(u) is set to the distance from s to u

    for all u ∈ V : 
        dist(u) = ∞
        prev(u) = nil 
    dist(s) = 0

    H = makequeue(V) # using dist-values as keys 
    while H is not empty:
        u = deletemin(H) # = |V| times
        for all edges (u, v) ∈ E:
            if dist(v) &amp;gt; dist(u) + l(u, v): 
                dist(v) = dist(u) + l(u, v) 
                prev(v) = u 
                decreasekey(H, v) # = |V| + |E| times
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Alternative

Initialize dist(s) to 0, other dist(·) values to ∞ 
R = { } # the &quot;known region&quot;
while R != V:
    Pick the node v !∈ R with smallest dist(·) 
    Add v to R
    for all edges (v, z) ∈ E:
        if dist(z) &amp;gt; dist(v) + l(v, z): 
            dist(z) = dist(v) + l(v, z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Runtime&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Binary heap: &lt;code&gt;O(|E|log|V|)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Array: &lt;code&gt;O(|V|^2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Bellman-Ford Algorithm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/dynamic-programming-set-23-bellman-ford-algorithm/&quot;&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Handles &lt;strong&gt;negative edges&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Only need &lt;strong&gt;local information&lt;/strong&gt; &lt;a href=&quot;http://stackoverflow.com/questions/16273092/difference-between-bellman-ford-and-dijkstras-algorithm&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Bellman-Ford(G, l, s):
# Input: Directed graph G = (V, E);
         edge lengths {le : e ∈ E} with no negative cycles; 
         vertex s ∈ V
# Output: For all vertices u reachable from s, dist(u) is set to the distance from s to u

    for all u ∈ V : 
        dist(u) = ∞
        prev(u) = nil

    dist(s) = 0
    repeat |V| − 1 times:
        for all e ∈ E: 
            update(e)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Runtime&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;O(|V||E|)&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Negative Cycle Detection&lt;/h4&gt;

&lt;p&gt;After &lt;code&gt;|V|-1&lt;/code&gt; times of iterations, apply 1 extra round. If some &lt;code&gt;dist&lt;/code&gt; reduced, then there is negative cycle.&lt;/p&gt;

&lt;h2&gt;Floyd-Warshal Algorithm&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/dynamic-programming-set-16-floyd-warshall-algorithm/&quot;&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Handles &lt;strong&gt;negative edges&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Find shortest paths between &lt;strong&gt;all pairs of vertices&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No &lt;strong&gt;negative cycles&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Floyd-Warshal(G, l, s):

    for all u ∈ V: 
        dist(u,u) = 0
    for all (u,v) ∈ E:
        dist(u,v) = l(u,v)

    for k = 1..|V|:
        for i = 1..|V|:
            for j = 1..|V|:
                if dist(i,j) &amp;gt; dist(i,k) + dist(k,j)
                    dist(i,j) = dist(i,k) + dist(k,j)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Runtime&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;O(|V|^3)&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Shortest Paths in DAGs&lt;/h2&gt;

&lt;h4&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Vertices appear in &lt;strong&gt;increasing linearized order&lt;/strong&gt; in any paths&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Implementation&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Dag-shortest-paths(G, l, s):
# Input: DagG = (V,E);
         edge lengths { le: e ∈ E };
         vertex s ∈ V
# Output: For all vertices u reachable from s, dist(u) is set to the distance from s to u

for all u ∈ V: 
    dist(u) = ∞
    prev(u) = nil

dist(s) = 0
Linearize G # DFS
for each u ∈ V, in linearized order:
    for all edges (u, v) ∈ E: 
        update(u, v)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/tech/algorithm/2016/11/14/shortest-path-algorithms.html</link>
        <guid isPermaLink="true">/blog/tech/algorithm/2016/11/14/shortest-path-algorithms.html</guid>
        
        <category>dijkstra's</category>
        
        <category>bellman-ford</category>
        
        <category>floyd–warshall</category>
        
        <category>data structure</category>
        
        <category>algorithm</category>
        
        <category>CSC373</category>
        
        
        <category>Blog</category>
        
        <category>Tech</category>
        
        <category>Algorithm</category>
        
      </item>
    
      <item>
        <title>Network Flow</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Flow Network Overview&lt;/li&gt;
&lt;li&gt;Maximum-Flow Problem

&lt;ol&gt;
&lt;li&gt;Residual Graph&lt;/li&gt;
&lt;li&gt;Implementation (Ford-Fulkerson Algorithm)&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Max-Flow Min-Cut Theorem&lt;/li&gt;
&lt;li&gt;Choosing Good Augmenting Paths&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Extensions to Max-Flow Problem

&lt;ol&gt;
&lt;li&gt;Circulations with Demands&lt;/li&gt;
&lt;li&gt;Circulations with Demands &amp;amp; Lower Bounds&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Bipartite Matching&lt;/li&gt;
&lt;li&gt;Image Segmentation&lt;/li&gt;
&lt;li&gt;Project Selection&lt;/li&gt;
&lt;li&gt;Baseball Elimination&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h3&gt;&lt;strong&gt;Flow Network Overview&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Components

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Capacities&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source nodes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sink nodes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Traffic&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Graph representation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;G = (V,E)
edge ce = capacity where ce &amp;gt;= 0
source node s ∈ V
sink node t ∈ V
internal nodes = all other nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assumptions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No edge enters &lt;code&gt;s&lt;/code&gt; &amp;amp; no edge leaves &lt;code&gt;t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;At least 1 edge incident to each node&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; is int&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flow conditions &amp;amp; notations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f(e)&lt;/code&gt; satisfies:

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= f(e) &amp;lt;= ce&lt;/code&gt; for all edges&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum_e_into_v(f(e)) = sum_e_outof_v(f(e))&lt;/code&gt; for all internal nodes&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v(f)&lt;/code&gt; denotes &lt;strong&gt;amount of flow generated at source&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum_e_outof_s(f(e))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f_out(v)&lt;/code&gt; = &lt;code&gt;sum_e_outof_v(f(e))&lt;/code&gt;; &lt;code&gt;f_in(v)&lt;/code&gt; = &lt;code&gt;sum_e_into_v(f(e))&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;Maximum-Flow Problem&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Given a flow network, find a flow of max possible value.&lt;/p&gt;

&lt;h4&gt;Residual Graph&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A graph indicating additional possible flow. If there is a path from source to sink in residual graph, then it is possible to add flow. &lt;/li&gt;
&lt;li&gt;Every edge of a residual graph has a value &lt;code&gt;residual capacity = original capacity of the edge - current flow&lt;/code&gt;. Residual capacity is basically the current capacity of the edge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Implementation (Ford-Fulkerson Algorithm)&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-8MwfgB-lyM&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initial flow &lt;code&gt;f&lt;/code&gt; = 0&lt;/li&gt;
&lt;li&gt;Find an augmenting path &lt;code&gt;P&lt;/code&gt; from &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Augment the path &lt;code&gt;P&lt;/code&gt; with flow &lt;code&gt;f&lt;/code&gt;, return new flow &lt;code&gt;f&amp;#39;&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Let &lt;code&gt;b = bottleneck(P,f)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For each edge &lt;code&gt;e = (u,v)&lt;/code&gt; of &lt;code&gt;P&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;If &lt;em&gt;forward edge&lt;/em&gt;, &lt;code&gt;f(e) += b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;em&gt;backward edge&lt;/em&gt;, &lt;code&gt;f(e=(v,u)) -= b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;return updated f&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;f&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update residual graph &lt;code&gt;Gf&lt;/code&gt; to &lt;code&gt;Gf&amp;#39;&lt;/code&gt;

&lt;ol&gt;
&lt;li&gt;Node set the same&lt;/li&gt;
&lt;li&gt;For each edge &lt;code&gt;e = (u,v)&lt;/code&gt; of &lt;code&gt;Gf&lt;/code&gt;, &lt;code&gt;f(e) &amp;lt; ce&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;Push &lt;code&gt;e = (u,v)&lt;/code&gt; with capacity &lt;code&gt;ce - f(e)&lt;/code&gt; (&lt;em&gt;forward edges&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Push &lt;code&gt;e&amp;#39; = (v,u)&lt;/code&gt; with capacity &lt;code&gt;f(e)&lt;/code&gt; (&lt;em&gt;backward edges&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Repeat until no path found&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;augment(f,P):
    Let b = bottleneck(P,f) 
    For each edge (u,v) ∈ P:
        If e = (u,v) is a forward edge: 
            increase f(e) in G by b
        Else: # ((u, v) is a backward edge, and let e = (v, u)) 
            decrease f(e) in G by b
    Return f

Max-Flow():
    Initially f(e) = 0 for all e in G
    While there is an s-t path in the residual graph Gf:
        Let P be a simple s-t path in Gf
        f' = augment(f,P)
        Update f to be f'
        Update the residual graph Gf to be Gf'
    Return f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Analysis&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Termination

&lt;ul&gt;
&lt;li&gt;At every intermediate stage of the Ford-Fulkerson Algorithm, the flow values {&lt;code&gt;f(e)&lt;/code&gt;} and the &lt;strong&gt;residual capacities in Gf are integers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The flow value strictly increases when we apply an augmentation, since we add &lt;code&gt;bottleneck &amp;gt; 0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Upper bound: &lt;code&gt;f_out(s)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hence the algorithm runs for at most &lt;code&gt;f_out(s)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Runtime

&lt;ul&gt;
&lt;li&gt;Let &lt;code&gt;m = |E|&lt;/code&gt;, &lt;code&gt;n = |V|&lt;/code&gt;, &lt;code&gt;C = f_out(s)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m &amp;gt;= n/2&lt;/code&gt; since all nodes have at least 1 incident edge, so &lt;code&gt;O(m+n) = O(m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BFS/DFS: &lt;code&gt;O(m+n) = O(m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;augment&lt;/code&gt;: &lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build new residual graph: &lt;code&gt;O(m)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overall &lt;code&gt;O(mC)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Max-Flow Min-Cut Theorem&lt;/h4&gt;

&lt;p&gt;In every flow network, the maximum value of an s-t flow is equal to the minimum capacity of an s-t cut.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cut

&lt;ul&gt;
&lt;li&gt;Divide nodes into 2 sets &lt;code&gt;A&lt;/code&gt; &amp;amp; &lt;code&gt;B&lt;/code&gt; s.t. &lt;code&gt;s ∈ A&lt;/code&gt; and &lt;code&gt;t ∈ B&lt;/code&gt;. Any flow going from &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; must cross from &lt;code&gt;A&lt;/code&gt; into &lt;code&gt;B&lt;/code&gt; at some point and use up some of the edge capacity from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cut&lt;/strong&gt; puts bound on max flow

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minimum cut&lt;/strong&gt;: the minimum capacity of any division, which equals the max flow&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Facts&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Let &lt;code&gt;f&lt;/code&gt; be any s-t flow, and &lt;code&gt;(A, B)&lt;/code&gt; any s-t cut. Then&lt;br&gt;
&lt;code&gt;v(f) = f_out(A) − f_in(A)&lt;/code&gt; and&lt;br&gt;
&lt;code&gt;v(f) = f_in(B) − f_out(B)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;v(f) = f_out(s) - f_in(s)
     = sum_v_in_A(f_out(v) - f_in(v)) # f_out(v) - f_in(v) = 0 for internal nodes
     = sum_e_outof_A(f(e)) - sum_e_into_A(f(e))
     = f_out(A) - f_in(A)
f_out(A) = f_in(B); f_in(A) = f_out(B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let &lt;code&gt;f&lt;/code&gt; be any s-t flow, and &lt;code&gt;(A,B)&lt;/code&gt; any s-t cut. Then&lt;br&gt;
&lt;code&gt;v(f) &amp;lt;= c(A,B)&lt;/code&gt;, where &lt;code&gt;c(A,B) = sum_e_outof_A(ce)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;v(f) = f_out(A) − f_in(A)
     ≤ f_out(A) # f_in(A) &amp;gt;= 0
     = sum_e_outof_A(f(e))
     ≤ sum_e_outof_A(ce)
     = c(A,B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;=&amp;gt; Any flow is upper-bounded by the capacity of every cut&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let &lt;code&gt;f&lt;/code&gt; be an s-t flow s.t. no s-t path in the residual graph &lt;code&gt;Gf&lt;/code&gt;. Then there is an s-t cut &lt;code&gt;(A*,B*)&lt;/code&gt; in &lt;code&gt;G&lt;/code&gt; where &lt;code&gt;v(f) = c(A*,B*)&lt;/code&gt;.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Let A* be a set of nodes in G where there is a s-v path in Gf
Let B* = V - A*
v(f) = f_out(A*) − f_in(A*)
     = sum_e_outof_A*(f(e)) − sum_e_into_A*_f(e)
     = sum_e_outof_A*(ce) - 0 # f(e) = ce
     = c(A*,B*)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The flow &lt;code&gt;f&lt;/code&gt; returned by Ford-Fulkerson is max flow.  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Let f* be max flow, (A*,B*) be min cut
Then there exists a flow f s.t. v(f) = c(A,B) by 3.
And by 2., v(f) = c(A,B) &amp;lt;= c(A*,B*)
Hence A = A*, B = B* because c(A*,B*) should be minimum
And by 2., v(f*) &amp;lt;= c(A*,B*) = v(f)
Hence f = f* because v(f*) should be maximum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given a max flow, we can compute an s-t min cut in &lt;code&gt;O(m)&lt;/code&gt; time by constructing the residual graph and perform BFS/DFS to find &lt;code&gt;A*&lt;/code&gt; &amp;amp; &lt;code&gt;B*&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If all capacities in the flow network are integers, then there is a max flow &lt;code&gt;f&lt;/code&gt; where every flow value &lt;code&gt;f(e)&lt;/code&gt; is an integer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Notes&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;With &lt;strong&gt;rational numbers&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;Multiply all by least common multiple of all capacities&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;With &lt;strong&gt;real numbers&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;May not terminate, since the progress we make at each iteration can be small&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max-flow min-cut theorm&lt;/strong&gt; still holds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Choosing Good Augmenting Paths&lt;/h4&gt;

&lt;h5&gt;Idea 1&lt;/h5&gt;

&lt;p&gt;Find the path with &lt;code&gt;large bottleneck capacity&lt;/code&gt;.&lt;br&gt;
Maintain a &lt;strong&gt;scaling parameter &lt;code&gt;sp&lt;/code&gt;&lt;/strong&gt; and look for paths having bottleneck of &lt;em&gt;at least &lt;code&gt;sp&lt;/code&gt;&lt;/em&gt;.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implementation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Scaling Max-Flow():
    Initially f(e) = 0 for all e in G
    Initially set sp = largest power of 2 &amp;lt;= max_e_outof_s(ce) 

    While sp &amp;gt;= 1:
        While there is an s-t path in the graph Gf(sp):
            Let P be a simple s-t path in Gf(sp)
                f' = augment(f,P)
                Update f to be f'
                Update Gf(sp)
        sp /= 2
    Return f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Runtime&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outer &lt;code&gt;While&lt;/code&gt; loop (scaling phase): at most &lt;code&gt;1 + logC&lt;/code&gt; where &lt;code&gt;C = sum_e_outof_s(ce)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;During the scaling phase, each augmentation increases the flow by at least &lt;code&gt;sp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;v(f) &amp;gt;= max flow - m*sp&lt;/code&gt; where &lt;code&gt;f = flow at the end of scaling phase&lt;/code&gt; and &lt;code&gt;m = |E|&lt;/code&gt;  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;f(e) &amp;gt; ce - sp for e = (u,v) which u ∈ A and v ∈ B
f(e) ≥ sp for e = (u,v) which u ∈ B and v ∈ A

v(f) = sum_e_outof_A(f(e)) − sum_e_into_A(f(e))
     ≥ sum_e_outof_A(ce - sp) - sum_e_into_A(sp)
     = c(A,B) - m*sp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;# of augmentations in a scaling phase is at most &lt;code&gt;2m&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;v(f*) &amp;lt;= v(f_prev) + m*sp = v(f_prev) + 2m*sp_prev
Each augmentation increases the flow by &amp;gt;= sp_prev
So at most 2m augmentations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Augmentation: &lt;code&gt;O(m)&lt;/code&gt; time; &lt;code&gt;1 + logC&lt;/code&gt; scaling phases; &lt;code&gt;2m&lt;/code&gt; augmentations each phase =&amp;gt; &lt;code&gt;O(m^2 logC)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scaling: polynomial in size of input (# of edges &amp;amp; numerical representation of capacities)&lt;br&gt;
Original: polynomial in magnatude of capacities&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Idea 2&lt;/h5&gt;

&lt;p&gt;Choose path with &lt;strong&gt;fewest number of edges&lt;/strong&gt;.&lt;br&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Edmonds%E2%80%93Karp_algorithm&quot;&gt;Edmond-Karp&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runtime: &lt;code&gt;O(|V||E|^2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;Extensions to Max-Flow Problem&lt;/strong&gt;&lt;/h3&gt;

&lt;h4&gt;Circulations with Demands&lt;/h4&gt;

&lt;p&gt;Multiple sources &amp;amp; sinks with fixed supply/demand values.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Demands

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dv &amp;gt; 0&lt;/code&gt;: &lt;code&gt;v&lt;/code&gt; wish to receive &lt;code&gt;dv&lt;/code&gt; more flow than it sends out (&lt;strong&gt;sink&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dv &amp;lt; 0&lt;/code&gt;: &lt;code&gt;v&lt;/code&gt; wish to send out &lt;code&gt;dv&lt;/code&gt; more flow than it receives (&lt;strong&gt;source&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dv = 0&lt;/code&gt;: not source nor sink&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Conditions

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= f(e) &amp;lt;= ce&lt;/code&gt; for all edges&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum_e_into_v(f(e)) = sum_e_outof_v(f(e))&lt;/code&gt; for all internal nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All demands satisfied&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Total supply = total demand&lt;br&gt;
&lt;code&gt;sum_v(dv) = sum_v(f_in(v)) - sum_v(f_out(v)) = 0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;sum_v_dv&amp;gt;0(dv) = sum_v_dv&amp;lt;0(-dv)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Conversion to Max-Flow Problem

&lt;ul&gt;
&lt;li&gt;Create super-source &lt;code&gt;s*&lt;/code&gt; connecting each node in &lt;code&gt;S&lt;/code&gt;; create super-sink &lt;code&gt;t*&lt;/code&gt; connecting each node in &lt;code&gt;T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For each node in &lt;code&gt;S&lt;/code&gt; (&lt;code&gt;dv &amp;lt; 0&lt;/code&gt;), add &lt;code&gt;(s*,v)&lt;/code&gt; with capacity &lt;code&gt;-dv&lt;/code&gt;; for each node in &lt;code&gt;T&lt;/code&gt; (&lt;code&gt;dv &amp;gt; 0&lt;/code&gt;), add &lt;code&gt;(v,t*)&lt;/code&gt; with capacity &lt;code&gt;dv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A feasible circulation is found iff max s*-t* flow has value &lt;code&gt;D&lt;/code&gt;, where &lt;code&gt;D = max capaxity from s* to t*&lt;/code&gt; (saturating edges connected to &lt;code&gt;s*&lt;/code&gt; and &lt;code&gt;t*&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Graph G has a feasible circulation with demands &lt;code&gt;{dv}&lt;/code&gt; if and only if for all cuts (A,B):&lt;br&gt;
&lt;code&gt;sum_v_in_B(dv) &amp;lt;= c(A,B)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Circulations with Demands &amp;amp; Lower Bounds&lt;/h4&gt;

&lt;p&gt;Enforce flow to use certain edges - place &lt;strong&gt;lower bounds&lt;/strong&gt; on edges.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conditions

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;le &amp;lt;= f(e) &amp;lt;= ce&lt;/code&gt; for all edges, where &lt;code&gt;le&lt;/code&gt; is the lower bound&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum_e_into_v(f(e)) = sum_e_outof_v(f(e))&lt;/code&gt; for all internal nodes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All demands satisfied&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Total supply = total demand&lt;br&gt;
&lt;code&gt;sum_v(dv) = sum_v(f_in(v)) - sum_v(f_out(v)) = 0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;sum_v_dv&amp;gt;0(dv) = sum_v_dv&amp;lt;0(-dv)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Conversion to Max-Flow Problem

&lt;ul&gt;
&lt;li&gt;Let capacities of edges be &lt;code&gt;ce - le&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let demands of nodes be &lt;code&gt;dv - Lv&lt;/code&gt;, where &lt;code&gt;Lv = sum_e_into_v(le) - sum_e_outof_v(le)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There is a feasible circulation in &lt;code&gt;G&lt;/code&gt; iff there is a feasible circulation in &lt;code&gt;G&amp;#39;&lt;/code&gt;, where &lt;code&gt;G&lt;/code&gt; is the original graph, &lt;code&gt;G&amp;#39;&lt;/code&gt; is the converted one&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;Bipartite Matching&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Max-flow problem property: &lt;strong&gt;if all edge capacities are integers, then the optimal flow found by our algorithm is integral.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Idea

&lt;ul&gt;
&lt;li&gt;Connect nodes from 1 set to &lt;code&gt;s&lt;/code&gt; with capacity 1&lt;/li&gt;
&lt;li&gt;Connect nodes from another set to &lt;code&gt;t&lt;/code&gt; with capacity 1&lt;/li&gt;
&lt;li&gt;Find max flow&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;Image Segmentation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Separate the foreground and background of an image.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Goal&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let &lt;code&gt;ai&lt;/code&gt; be likelihood to foreground for pixel &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;bi&lt;/code&gt; be likelihood to background for pixel &lt;code&gt;i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;pij&lt;/code&gt; be separation penalty&lt;/li&gt;
&lt;li&gt;Maximize &lt;code&gt;q(A,B) = sum_i_in_A(ai) + sum_j_in_B(bi) - sum_(i,j)_in_diff_set(pij)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3 problems&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The goal is seeking to maximize an objective

&lt;ul&gt;
&lt;li&gt;Maximize&lt;br&gt;
&lt;code&gt;q(A,B) = sum_i_in_A(ai) + sum_j_in_B(bi) - sum_(i,j)_in_diff_set(pij)&lt;/code&gt;&lt;br&gt;
&amp;lt;=&amp;gt; Minimize&lt;br&gt;
&lt;code&gt;q&amp;#39;(A,B) = sum_i_in_A(bi) + sum_j_in_B(ai) + sum_(i,j)_in_diff_set(pij)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;No source &amp;amp; sink

&lt;ul&gt;
&lt;li&gt;Create super-source &lt;code&gt;s*&lt;/code&gt; for foreground &amp;amp; super-sink &lt;code&gt;t*&lt;/code&gt; for background&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Undirected graph

&lt;ul&gt;
&lt;li&gt;Model neighboring pair with 2 directed edges&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Graph representation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Edges (s,j), where j ∈ B; capacity = aj
Edges (i,t), where i ∈ A; capacity = bi
Edges (i,j), where i ∈ A and j ∈ B; capacity = p_ij

c(A,B) = q'(A,B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;Project Selection&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A set of projects &lt;code&gt;P&lt;/code&gt; has &lt;em&gt;revenue&lt;/em&gt; &lt;code&gt;pi&lt;/code&gt; being either positive or negative. Certain projects have &lt;em&gt;prerequisites&lt;/em&gt; for other projects. Find a set of projects that maximizes the profits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Graph representation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Edges (s,i), where pi &amp;gt; 0; capacity = pi
Edges (i,t), where pi &amp;lt; 0; capacity = -pi
Edges (i,j), where i depends on j; capacity = inf

Max flow C = sum_i_pi&amp;gt;0(pi)
Min cut (A',B'), where if i ∈ A has edge (i,j), j ∈ A
Set of projects: A'-{s}, optimal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimality analysis&lt;/p&gt;

&lt;p&gt;Prove the min cut in &lt;code&gt;G&amp;#39;&lt;/code&gt; determines the optimum set of projects.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capacity of cut &lt;code&gt;(A&amp;#39;,B&amp;#39;)&lt;/code&gt; is &lt;code&gt;c(A&amp;#39;,B&amp;#39;) = C − sum_i_in_A(pi)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;(A&amp;#39;, B&amp;#39;)&lt;/code&gt; is a cut with capacity &amp;lt;= C, then set &lt;code&gt;A = A&amp;#39; − {s}&lt;/code&gt; satisfies the precedence constraints&lt;/li&gt;
&lt;li&gt;Hence &lt;code&gt;c(A&amp;#39;,B&amp;#39;) = C - profit(A)&lt;/code&gt; and small cuts imply big profits&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;Baseball Elimination&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A set of teams &lt;code&gt;S&lt;/code&gt;, each has &lt;code&gt;wi&lt;/code&gt; wins. Some games &lt;code&gt;g_xy&lt;/code&gt; left. Check if team &lt;code&gt;z&lt;/code&gt; has been eliminated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Averaging argument&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Suppose z has indeed been eliminated. 
Then:

- z can finish with at most m wins.
- There is a set of teams T ⊆ S s.t. 
    sum_x_in_T(wx) + sum_x,y_in_T(gxy) &amp;gt; m|T|

Hence one of the teams in T must end with &amp;gt; m wins.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Graph representation&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Let u_xy be some games left between x &amp;amp; y
Let m be w_z + remaining_games_of_z
Let g* be total number of games left

Edges (s,u_xy), capacity = g_xy
Edges (u_xy,vx), capacity = inf
Edges (vx,t), capacity = m - wx

Eliminate x iff max flow in G &amp;lt; g* # else after g* games every team will have wins not exceeding m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analysis&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If both &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; belong to &lt;code&gt;T&lt;/code&gt;, then &lt;code&gt;u_xy ∈ A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(A, B)&lt;/code&gt; is a min cut: &lt;code&gt;u_xy ∈ A&lt;/code&gt; iff both &lt;code&gt;x, y ∈ T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;T&lt;/code&gt; can be used in the averaging argument   &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;c(A,B) = sum_x_in_T(m-wx) + sum_{x,y}_!in_T(g_xy)
       = m|T| - sum_x_in_T(wx) + (g* - sum_x,y_in_T(g_xy))
m|T| - sum_x_in_T(wx) - sum_x,y_in_T(g_xy) &amp;lt; 0 # c(A,B) = g' &amp;lt; g*

sum_x_in_T(wx) + sum_x,y_in_T(g_xy) &amp;gt; m|T|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/&quot;&gt;GeeksForGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/algorithm/2016/11/09/network-flow.html</link>
        <guid isPermaLink="true">/blog/notes/algorithm/2016/11/09/network-flow.html</guid>
        
        <category>network flow</category>
        
        <category>algorithm</category>
        
        <category>CSC373</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Algorithm</category>
        
      </item>
    
      <item>
        <title>Data Stucture Notes</title>
        <description>&lt;p&gt;Data stucture notes for coding competitions.&lt;/p&gt;

&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;BST&lt;/li&gt;
&lt;li&gt;Monotone Queue&lt;/li&gt;
&lt;li&gt;Block List&lt;/li&gt;
&lt;li&gt;Merge-Find Set&lt;/li&gt;
&lt;li&gt;Split &amp;amp; Join AVL&lt;/li&gt;
&lt;li&gt;Persistent AVL&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;BST&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;li&gt;Insertion, deletion, searching &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lower_bound&lt;/code&gt;, &lt;code&gt;upper_bound&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Find element in range&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1613&quot;&gt;For Fans of Statistics&lt;/a&gt;
&lt;a href=&quot;http://poj.org/problem?id=2418&quot;&gt;Hardwood Species&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Monotone Queue&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic operations

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt; in &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt; in &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt;/&lt;code&gt;min&lt;/code&gt; in &lt;code&gt;O(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Insert(k):
    while (queue not empty) and (tail element &amp;gt;= k):
        discard tail
    append k to tail

Min():
    return head of queue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2823&quot;&gt;Sliding Window&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Block List&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Structure

&lt;ul&gt;
&lt;li&gt;Partition indices into &lt;code&gt;O(sqrt(n))&lt;/code&gt; segments, each of length &lt;code&gt;O(sqrt(n))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Basic operations

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Range operation on &lt;code&gt;[i,j]&lt;/code&gt; in &lt;code&gt;O(sqrt(n))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Insert(x):
    # invariant: each segment has elements &amp;gt;= L and &amp;lt; 3L; OR only one segment &amp;lt; 3L

    locate segment S # O(sqrt(n))
    brute force insertion on S # O(L)
    if size(S) == 3L:
        evenly split into 2 segments

Delete(x):
    locate segment S # O(sqrt(n))
    brute force deletion on S # O(L)
    if size(S) == L and S has adjacent segment:
        combine 2 segments
        evenly split into 2 segments

# range operation
# change &amp;amp; sum as example

## change [i,j] to x
Change(i, j, x):
    if i == l and j == r: # O(1)
        b = true
        y = x
        s = x * (r - l + 1)
    else: # O(L)
        if b == true:
            set every element in [l,r] to y
            b = false
        set every element in [i,j] to x
        calculate s

## query [i,j]
Query(i, j):
    if i == l and j == r: # O(1)
        return s
    else: # O(L)
        if b == ture:
            set every element in [l,r] to y
            b = false
        set every element in [i,j] to x
        calculate s
        return s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3580&quot;&gt;SuperMemo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Merge-Find Set&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Disjoint-set_data_structure&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Structure

&lt;ul&gt;
&lt;li&gt;A ground set &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A collection &lt;code&gt;C&lt;/code&gt; of subsets of &lt;code&gt;S&lt;/code&gt; where 2 different elements in &lt;code&gt;C&lt;/code&gt; are disjoint&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Basic operations

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union&lt;/code&gt;: union 2 subsets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;: find the subset a specific elememt is in&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: test where 2 elements are in the same subset&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Implementation (linear)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;P: P[i] = parent of i in S
F(P): forest difined by P

Find(x):
    while P[x] != x:
        x = P[x]
    return x # root

Union(x):
    P[Find(x)] = Find(y)

Test(x, y):
    return Find(x) == Find(y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Implementation (optimized)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;R: rank of element; init R = {0}

Find(x): # path compression
    if P[x] != x:
        P[x] = Find(P[x])
    return x

Union(x): # union by rank
    x' = Find(x)
    y' = Find(y)
    if R[x'] &amp;lt; R[y']:
        P[x'] = y'
    elif R[x'] &amp;gt; R[y']:
        P[y'] = x'
    else:
        P[x'] = y'
        R[y']++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Extension 1: Maintaining the Difference&lt;/h3&gt;

&lt;p&gt;For each element &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;V[i]&lt;/code&gt; is the underlying unknown integer. Information &lt;code&gt;V[j] - V[i] = k&lt;/code&gt; comes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem

&lt;ol&gt;
&lt;li&gt;Consistent with previously known information?&lt;/li&gt;
&lt;li&gt;If consistent, record the information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V[j] - V[i]&lt;/code&gt; uniquely determined?&lt;/li&gt;
&lt;li&gt;If unique, answer the value&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;D: difference; D[i] = V[i] - V[P[i]]; init D = {0}

Find(x):
    if P[x] != x:
        (P[x],d) = Find(P[x])
        D[x] += d
    return (x, D[x])

Union(i, j, k): # V[i] - V[j] = k
    (x',D[i]) = Find(i)
    (y',D[j]) = Find(j)
    if R[x'] &amp;lt; R[y']:
        P[x'] = y'
        D[x'] = D[j] - D[i] - k
    elif R[x'] &amp;gt; R[y']:
        P[y'] = x'
        D[y'] = D[i] - D[j] - k
    else:
        P[x'] = y'
        D[x'] = D[j] - D[i] - k
        R[y']++r

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apply the data structure&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provided &lt;code&gt;V[j] - V[i] = k&lt;/code&gt;: &lt;code&gt;Union(i,j,k)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Answer &lt;code&gt;V[j] - V[i]&lt;/code&gt;: if &lt;code&gt;Test(i,j)&lt;/code&gt; then &lt;code&gt;return D[j] - D[i]&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3038&quot;&gt;How Many Answers Are Wrong&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Extension 2: XOR&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3234&quot;&gt;Exclusive-OR&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Split &amp;amp; Join AVL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic operations

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join&lt;/code&gt;: &lt;code&gt;T1&lt;/code&gt; &amp;amp; &lt;code&gt;T2&lt;/code&gt; are AVL trees, and any keyword in &lt;code&gt;T1&lt;/code&gt; is less than any keyword in &lt;code&gt;T2&lt;/code&gt;. Return a union in &lt;code&gt;O(|h(T1)-h(T2)|)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt;: return &lt;code&gt;T1&lt;/code&gt; with keywords less than &lt;code&gt;k&lt;/code&gt; &amp;amp; &lt;code&gt;T2&lt;/code&gt; with keywords larger than &lt;code&gt;k&lt;/code&gt; in &lt;code&gt;O(h(T))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: &lt;code&gt;split(T,x)&lt;/code&gt;: return &lt;code&gt;join(T1,{x},T2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: &lt;code&gt;split(T,x)&lt;/code&gt;: return &lt;code&gt;join(T1,T2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intervalSelection&lt;/code&gt;: return &lt;code&gt;T&lt;/code&gt; with elements &lt;code&gt;k1 &amp;lt;= e &amp;lt;= k2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intervalCut&lt;/code&gt;: cut out interval&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linkAndCut&lt;/code&gt;: &lt;code&gt;intervalCut&lt;/code&gt; and link to another place&lt;/li&gt;
&lt;li&gt;other statistic maintainenance e.g. min, max, sum&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Persistent AVL&lt;/h2&gt;

&lt;p&gt;AVL is link based, and modification operations are &lt;code&gt;join&lt;/code&gt; &amp;amp; &lt;code&gt;split&lt;/code&gt;. Each time &lt;code&gt;O(logn)&lt;/code&gt; nodes visited and modified. Create a copy of &lt;code&gt;root&lt;/code&gt; to modified nodes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=24&amp;amp;page=show_problem&amp;amp;problem=3983&quot;&gt;Version Controlled Editor&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/competition/2016/11/09/data-structure-notes.html</link>
        <guid isPermaLink="true">/blog/notes/competition/2016/11/09/data-structure-notes.html</guid>
        
        <category>competition</category>
        
        <category>data structure</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Competition</category>
        
      </item>
    
      <item>
        <title>Competition Notes</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;p&gt;Notes for coding competitions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Complexity&lt;/h2&gt;

&lt;h3&gt;TLE&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;10^8&lt;/code&gt; int operations/&lt;code&gt;10^7&lt;/code&gt; floating point operations in a for loop run in around &lt;strong&gt;1 sec&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;n = 20: exponential ok&lt;/li&gt;
&lt;li&gt;n = 100: &lt;code&gt;O(n^3)&lt;/code&gt; ok&lt;/li&gt;
&lt;li&gt;n = 1000: &lt;code&gt;O(n^2)&lt;/code&gt; ok&lt;/li&gt;
&lt;li&gt;n = 10^4: &lt;code&gt;n*polylog(n)&lt;/code&gt; ^ &lt;code&gt;n*sqrt(n)&lt;/code&gt; ok&lt;/li&gt;
&lt;li&gt;n = 10^5: &lt;code&gt;nlogn&lt;/code&gt; ok&lt;/li&gt;
&lt;li&gt;n = 10^6: &lt;code&gt;O(n)&lt;/code&gt; ok&lt;/li&gt;
&lt;li&gt;n = 10^9: &lt;code&gt;O(logn)&lt;/code&gt; ok&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Online Resource&lt;/h2&gt;

&lt;h3&gt;Data Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://acm.timus.ru/problemset.aspx?space=1&amp;amp;tag=structure&quot;&gt;Timus OJ&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 -0500</pubDate>
        <link>/blog/notes/competition/2016/11/09/competition-notes.html</link>
        <guid isPermaLink="true">/blog/notes/competition/2016/11/09/competition-notes.html</guid>
        
        <category>competition</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Competition</category>
        
      </item>
    
  </channel>
</rss>
