<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MyCoon</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 06 Aug 2017 18:51:56 +0900</pubDate>
    <lastBuildDate>Sun, 06 Aug 2017 18:51:56 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Getting Started with Docker Running Flask, RedisDB, and NGINX</title>
        <description>&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is a trending term nowadays. 
The concept is called container, which provides isolation for different applications and
makes possible for the application to be shipped and run on a diversity of platforms.&lt;/p&gt;

&lt;p&gt;In this tutorial, the basic concepts of Docker will be covered, some basic commands introduced, and finally a tutorial on
how to deploy a &lt;strong&gt;Flask&lt;/strong&gt; app connected to a &lt;strong&gt;Redis&lt;/strong&gt; database and served on &lt;strong&gt;NGINX&lt;/strong&gt; with docker network will be covered.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Introducing Docker &amp;amp; Setup&lt;/li&gt;
&lt;li&gt;Basic Commands&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hands On Time: A Flask Project on Docker&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Introducing Docker&lt;/h2&gt;

&lt;h4&gt;The Purpose of Containers&lt;/h4&gt;

&lt;p&gt;For biginners, you can think of &lt;strong&gt;container&lt;/strong&gt; as a &lt;strong&gt;virtual machine&lt;/strong&gt;, or even just a machine. 
The underlying infrastructure and mechanism is of course not the same, but you will know the purpose of using containers: &lt;strong&gt;running applications independently&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For developers, you often bump into the problem when you want to ship a single application to a different platform 
-- everything regarding the environment might need to be reconfigured again, which means another round of pain. 
With docker, all the dependencies are packed together with the code into a single container, which you can just lift and go.&lt;/p&gt;

&lt;p&gt;Unlike bulky VMs, which include the entire OS kernel, containers are more lightweight and require less resource.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://www.docker.com/sites/default/files/Container%402x.png&quot; alt=&quot;container infrastructure&quot; width=&quot;300px&quot; height=&quot;300px&quot; /&gt;
  &lt;img src=&quot;https://www.docker.com/sites/default/files/VM%402x.png&quot; alt=&quot;vm infrastructure&quot; width=&quot;300px&quot; height=&quot;300px&quot; /&gt;
&lt;/p&gt;

&lt;h4&gt;Setup&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/#setup&quot;&gt;Install &amp;amp; Setup Docker&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;Install Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Glossary&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;DockerHub&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A place for sharing images&lt;/strong&gt;.
Share your image, or pull existing images from here.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&quot;&gt;Image&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A package including code, libraries, environment variables, and config files that can be run&lt;/strong&gt;.
Think of it as a set of configurations for a single environment. Hence images can be created, downloaded, shared, etc.
All it waits for is to be executed, which becomes a container.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&quot;&gt;Container&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A running instance of an image&lt;/strong&gt;.
Images are configurations residing in storage, and containers bring them into memory.
Think of &lt;strong&gt;image&lt;/strong&gt; as a certain static environment configuration, and &lt;strong&gt;containers&lt;/strong&gt; are created once you load and run the environment; there can be many container instances running a certain image, but one image defines only one environment.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/&quot;&gt;Service&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;An image for a microservice in the context of some larger applications which you with to run in distributed environment&lt;/strong&gt;. You can scale services by starting a set of replicated containers. Docker compose is used to define a set of services.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/tutorials/dockervolumes/#data-volumes&quot;&gt;Volume&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A directory providing persistent and sharable data&lt;/strong&gt;.
With out volumes, data will be destroyed once the container is removed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/get-started/part2/#dockerfile&quot;&gt;Dockerfile&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;An environment configuration file for starting your container.&lt;/strong&gt; 
The file is composed of a set of instructions related to setting up the environment, 
such as &lt;em&gt;move this and that to docker&lt;/em&gt;, &lt;em&gt;make this and that port accessible&lt;/em&gt;, &lt;em&gt;run this and that commands when starting&lt;/em&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/&quot;&gt;Docker Network&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A mechanism for a cluster of containers to communicate with each other.&lt;/strong&gt; 
For a single project, it may contain several containers, one for web app, one for database, one for proxy server, etc.
Docker network provides a way for them to communicate with each other, while different docker networks remain isolated. More conveniently, while the IP address of each container is dynamic, the name of it in a network is static, hence provide a way to access, for example, container &lt;code&gt;example&lt;/code&gt; with port &lt;code&gt;8080&lt;/code&gt; published, via &lt;code&gt;http://example:8080&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/overview/&quot;&gt;Docker Compose&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A tool for defining and running a cluster of containers.&lt;/strong&gt;
For the single project consisting of serveral containers, you may have to &lt;code&gt;docker run&lt;/code&gt; them individually to start the single service.
Docker compose lets you create and run your services with a single command. Definitions are written in &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Don&amp;#39;t Mix Up...&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21553353/what-is-the-difference-between-cmd-and-entrypoint-in-a-dockerfile&quot;&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; v.s. &lt;code&gt;CMD&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Both somehow specify which commands to run when started. 
The default &lt;code&gt;ENTRYPOINT&lt;/code&gt;, or &lt;code&gt;entrypoint&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt;, is &lt;code&gt;/bin/sh -c&lt;/code&gt;; the default &lt;code&gt;CMD&lt;/code&gt; is &lt;code&gt;bash&lt;/code&gt;. 
Consider the command &lt;code&gt;docker run -it some-image /bin/bash&lt;/code&gt;; everything after &lt;code&gt;some-image&lt;/code&gt; is the &lt;code&gt;CMD&lt;/code&gt; (in this case &lt;code&gt;/bin/bash&lt;/code&gt;). 
Running this command will run &lt;code&gt;ENTRYPOINT + CMD&lt;/code&gt;, i.e. &lt;code&gt;/bin/sh -c /bin/bash&lt;/code&gt;.
E.g. if you specify the &lt;code&gt;ENTRYPOINT&lt;/code&gt; as &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt; as &lt;code&gt;.&lt;/code&gt;, the full command looks like &lt;code&gt;docker run --entrypoint=&amp;quot;ls&amp;quot; some-image .&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22111060/difference-between-expose-and-publish-in-docker&quot;&gt;&lt;code&gt;EXPOSE&lt;/code&gt; v.s. &lt;code&gt;-p&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EXPOSE&lt;/code&gt;, or &lt;code&gt;expose&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt;, is for inter-container communications, e.g. using docker network; 
the port exposed won&amp;#39;t be accessible to outside of the docker. 
&lt;code&gt;-p&lt;/code&gt;, or &lt;code&gt;ports&lt;/code&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt;, publishes the port to the world, including all other containers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Basic Commands&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/image/&quot;&gt;Image&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# List the current images you have and their details&lt;/span&gt;
docker images

&lt;span class=&quot;c&quot;&gt;# Download/upload an image from registry&lt;/span&gt;
docker pull &amp;lt;image-name&amp;gt;[:&amp;lt;tag&amp;gt;]
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; docker pull nginx:latest
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; docker pull someuser/his-image

docker push &amp;lt;image-name&amp;gt;[:&amp;lt;tag&amp;gt;]
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; docker push me/my-image

&lt;span class=&quot;c&quot;&gt;# Remove images&lt;/span&gt;
docker rmi &amp;lt;image-name|image-id|image-tag&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Remove all images&lt;/span&gt;
docker rmi &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images -q&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create image using Dockerfile under specified path&lt;/span&gt;
docker build -t &amp;lt;image-name&amp;gt;[:&amp;lt;tag&amp;gt;] &amp;lt;path-to-directory-containing-dockerfile&amp;gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; docker build -t me/my-image .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/run/&quot;&gt;Container&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# List all running containers&lt;/span&gt;
docker ps

&lt;span class=&quot;c&quot;&gt;# Show container details&lt;/span&gt;
docker inspect &amp;lt;container-name|container-id&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Run an image&lt;/span&gt;
docker run &amp;lt;image-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Run an image with container name assigned&lt;/span&gt;
docker run --name &amp;lt;container-name&amp;gt; &amp;lt;image-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Run an image in interative mode, interact with the bash shell created in the container&lt;/span&gt;
docker run -it &amp;lt;image-name&amp;gt; /bin/bash

&lt;span class=&quot;c&quot;&gt;# Run an image in detached mode, i.e. in background&lt;/span&gt;
docker run -d &amp;lt;image-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Automatically remove the container when it exits&lt;/span&gt;
docker run --rm &amp;lt;image-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Run an image on published port, mapping the port exposed by the container to the host port on my machine&lt;/span&gt;
docker run -p &amp;lt;host-port&amp;gt;:&amp;lt;container-exposed-port&amp;gt; &amp;lt;image-name&amp;gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; docker run -p 80:8080 nginx

&lt;span class=&quot;c&quot;&gt;# Run an image with volume specified, sharing the directory in the user's path to the container's path&lt;/span&gt;
docker run -v &amp;lt;user-path&amp;gt;:&amp;lt;container-path&amp;gt; &amp;lt;image-name&amp;gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; docker run -v /etc/nginx:/etc/nginx nginx

&lt;span class=&quot;c&quot;&gt;# Stop a container&lt;/span&gt;
docker stop &amp;lt;container-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Remove a container&lt;/span&gt;
docker rm &amp;lt;container-name|container-id&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Remove all containers&lt;/span&gt;
docker rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps -a -q&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/network/&quot;&gt;Docker Network&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# List all networks&lt;/span&gt;
docker network ls

&lt;span class=&quot;c&quot;&gt;# Create a network&lt;/span&gt;
docker network create &amp;lt;network-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Connect a network to a container&lt;/span&gt;
docker network connect &amp;lt;network-name&amp;gt; &amp;lt;container-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Or, run a container with network specified&lt;/span&gt;
docker run --net &amp;lt;network-name&amp;gt; &amp;lt;image-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Show network details&lt;/span&gt;
docker network inspect &amp;lt;network-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Remove a network&lt;/span&gt;
docker network rm &amp;lt;network-name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# Disconnet a container from a network&lt;/span&gt;
docker network disconnect &amp;lt;network-name&amp;gt; &amp;lt;container-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/reference/overview/&quot;&gt;Docker Compose&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# (Re)create and run the service&lt;/span&gt;
docker-compose up

&lt;span class=&quot;c&quot;&gt;# Remove stopped services&lt;/span&gt;
docker-compose rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Hands On Time: A Flask Project on Docker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pyliaorachel/docker-flask-redis-nginx-ssl&quot;&gt;Source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will create a network first so that containers can communicate within this network. Then we create and test the 3 containers, flask app, redis db, and nginx server, one by one. Finally, we demonstrate how to use docker compose to start the 3 services all at once.&lt;/p&gt;

&lt;h4&gt;Init Project&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create project named &lt;code&gt;example&lt;/code&gt; with the structure below. Different services are seperated into different folders, each running a container (or serveral containers, if you want to scale).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;.
├── README.md
└── src
    ├── docker-compose.yml                      &lt;span class=&quot;c&quot;&gt;# docker compose configuration&lt;/span&gt;
    ├── flaskapp                                &lt;span class=&quot;c&quot;&gt;# Service 1&lt;/span&gt;
    │   ├── Dockerfile                            &lt;span class=&quot;c&quot;&gt;# image configuration&lt;/span&gt;
    │   ├── __init__.py
    │   ├── example
    │   │   ├── __init__.py
    │   │   ├── app.py                            &lt;span class=&quot;c&quot;&gt;# flask app entry&lt;/span&gt;
    │   │   ├── db.py                             &lt;span class=&quot;c&quot;&gt;# APIs to redis db&lt;/span&gt;
    │   │   └── wsgi.py                           &lt;span class=&quot;c&quot;&gt;# WSGI server entry&lt;/span&gt;
    │   ├── requirements.txt                      &lt;span class=&quot;c&quot;&gt;# dependency information (production)&lt;/span&gt;
    │   └── setup.py                              &lt;span class=&quot;c&quot;&gt;# dependency information (development)&lt;/span&gt;
    ├── nginx                                   &lt;span class=&quot;c&quot;&gt;# Service 2&lt;/span&gt;
    │   ├── Dockerfile                            &lt;span class=&quot;c&quot;&gt;# image configuration&lt;/span&gt;
    │   ├── __init__.py
    │   └── nginx.conf                            &lt;span class=&quot;c&quot;&gt;# nginx server configuration&lt;/span&gt;
    └── redisdb                                 &lt;span class=&quot;c&quot;&gt;# Service 3&lt;/span&gt;
        ├── Dockerfile                            &lt;span class=&quot;c&quot;&gt;# image configuration&lt;/span&gt;
        ├── __init__.py
        └── redis.conf                            &lt;span class=&quot;c&quot;&gt;# redis server configuration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create &lt;code&gt;virtualenv&lt;/code&gt; for each container. Since only &lt;code&gt;flaskapp&lt;/code&gt; need a python environment, we only create this one.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src/flaskapp
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;virtualenv venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Packages in &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src/flaskapp
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/activate
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip3 install -e . &lt;span class=&quot;c&quot;&gt;# dev mode&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that &lt;code&gt;virtualenv&lt;/code&gt; is optional. It can help you test your project in isolated python environment before you deploy it on docker.&lt;/p&gt;

&lt;h4&gt;Create Docker Network&lt;/h4&gt;

&lt;p&gt;Create a &lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/&quot;&gt;Docker network&lt;/a&gt; for communication between the 3 containers below. We will name the network &lt;code&gt;example&lt;/code&gt;, which is the same as our project name.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker network create example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker network ls
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;NETWORK ID          NAME                DRIVER              SCOPE
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;...
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;abcdefghijkl        example             bridge              &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Flask App Container&lt;/h4&gt;

&lt;p&gt;The following assumes &lt;code&gt;venv&lt;/code&gt; in &lt;code&gt;src/flaskapp&lt;/code&gt; is activated.&lt;/p&gt;

&lt;h6&gt;Add Flask App &amp;amp; Gunicorn&lt;/h6&gt;

&lt;p&gt;See &lt;code&gt;src/flaskapp/example/app.py&lt;/code&gt; and &lt;code&gt;src/flaskapp/example/wsgi.py&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src/flaskapp
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gunicorn --bind 0.0.0.0:8080 example.wsgi

&lt;span class=&quot;c&quot;&gt;# Open browser and go to `localhost:8080`. You should see `Hello World!`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Freeze dependencies into &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip3 freeze | grep -v &lt;span class=&quot;s1&quot;&gt;'exampleflask'&lt;/span&gt; &amp;gt; requirements.txt &lt;span class=&quot;c&quot;&gt;# ignore dependency on itself&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;&lt;a href=&quot;https://www.smartfile.com/blog/dockerizing-a-python-flask-application/&quot;&gt;Deploy on Docker&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;See &lt;code&gt;src/flaskapp/Dockerfile&lt;/code&gt;. &lt;code&gt;venv&lt;/code&gt; is made ignored by adding it in &lt;code&gt;.dockerignore&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build image with tag &lt;code&gt;yourusername/exampleflask&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src/flaskapp
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build -t yourusername/exampleflask .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run container on image &lt;code&gt;yourusername/exampleflask&lt;/code&gt; with name &lt;code&gt;exampleflask&lt;/code&gt;, publish port &lt;code&gt;8080&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm -p 8080:8080 --name exampleflask yourusername/exampleflask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open browser and go to &lt;code&gt;localhost:8080&lt;/code&gt;. You should see &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Redis DB Container&lt;/h4&gt;

&lt;p&gt;The following assumes &lt;code&gt;venv&lt;/code&gt; in &lt;code&gt;src/flaskapp&lt;/code&gt; is activated.&lt;/p&gt;

&lt;h6&gt;Add Redis DB to Flask App&lt;/h6&gt;

&lt;p&gt;See &lt;code&gt;src/flaskapp/example/db.py&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&quot;https://redis.io/topics/quickstart&quot;&gt;redis-server&lt;/a&gt; on your local machine first for testing&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Start the server on default port `6397`&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;redis-server

&lt;span class=&quot;c&quot;&gt;# Start the flask app&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src/flaskapp
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gunicorn --bind 0.0.0.0:8080 example.wsgi

&lt;span class=&quot;c&quot;&gt;# Open browser and go to `localhost:8080/&amp;lt;your-name&amp;gt;`. You should see `Hello &amp;lt;your-name&amp;gt;!`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;&lt;a href=&quot;https://docs.docker.com/samples/redis/#start-a-redis-instance&quot;&gt;Deploy on Docker&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;See &lt;code&gt;src/redisdb/Dockerfile&lt;/code&gt; and &lt;code&gt;src/redisdb/redis.conf&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build image with tag &lt;code&gt;yourusername/exampleredis&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;redisdb
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build -t yourusername/exampleredis .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run container on image &lt;code&gt;yourusername/exampleredis&lt;/code&gt; with name &lt;code&gt;exampleredis&lt;/code&gt;, publish port &lt;code&gt;6379&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm -p 6379:6379 --name exampleredis yourusername/exampleredis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;redis-cli
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;127.0.0.1:6379&amp;gt;

&lt;span class=&quot;c&quot;&gt;# This is wrong&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;not connected&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop the containers, now run &lt;code&gt;flaskapp&lt;/code&gt; and &lt;code&gt;redisdb&lt;/code&gt; in docker network &lt;code&gt;example&lt;/code&gt; for communication&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker stop exampleflask exampleredis

&lt;span class=&quot;c&quot;&gt;# No need to publish port for redis, &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# as the port is `EXPOSE`d in `Dockerfile` to other containers in the same docker network&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm --net example --name exampleredis yourusername/exampleredis
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm -p 8080:8080 --net example --name exampleflask yourusername/exampleflask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open browser and go to &lt;code&gt;localhost:8080/&amp;lt;your-name&amp;gt;&lt;/code&gt;. You should see &lt;code&gt;Hello &amp;lt;your-name&amp;gt;!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that &lt;code&gt;Dockerfile&lt;/code&gt; is needed only when you want to use your customized redis server configuration written in &lt;code&gt;redis.conf&lt;/code&gt;. 
If you don&amp;#39;t need a customized configuration, you don&amp;#39;t need to build a new image yourself and can simply use the base image of &lt;code&gt;redis&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm --net example --name exampleredis redis redis-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then modify &lt;code&gt;docker-compose.yml&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;exampleredis&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; that &lt;code&gt;bind 127.0.0.1&lt;/code&gt; in the &lt;code&gt;redis.conf&lt;/code&gt; file &lt;strong&gt;SHOULD&lt;/strong&gt; be changed into &lt;code&gt;bind 0.0.0.0&lt;/code&gt; or else other containers still cannot access the redis server.&lt;/p&gt;

&lt;h4&gt;NGINX Container&lt;/h4&gt;

&lt;h6&gt;Setup an NGINX Server&lt;/h6&gt;

&lt;p&gt;For &lt;code&gt;HTTP&lt;/code&gt; requests, see &lt;code&gt;src/nginx/nginx.conf.sample&lt;/code&gt; and follow &lt;a href=&quot;https://pyliaorachel.github.io/blog/tech/system/2017/07/07/flask-app-with-gunicorn-on-nginx-server-upon-aws-ec2-linux.html&quot;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;HTTPS&lt;/code&gt;requests, see &lt;code&gt;src/nginx/nginx-ssl.conf.sample&lt;/code&gt; and follow &lt;a href=&quot;https://pyliaorachel.github.io/blog/tech/system/2017/07/14/nginx-server-ssl-setup-on-aws-ec2-linux-with-letsencrypt.html&quot;&gt;this tutoiral&lt;/a&gt;. Make sure that you have used &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;letsencrypt&lt;/a&gt; or other means to retrieve the certificate and keys.&lt;/p&gt;

&lt;p&gt;Choose either of them, modify the &lt;code&gt;&amp;lt;your-domain-name&amp;gt;&lt;/code&gt; (and &lt;code&gt;your.domain.name&lt;/code&gt; for &lt;code&gt;HTTPS&lt;/code&gt;) in the &lt;code&gt;*.sample&lt;/code&gt; file, and name it &lt;code&gt;nginx.conf&lt;/code&gt;. For HTTPS, if you did not use &lt;code&gt;letsencrypt&lt;/code&gt;, also change the &lt;code&gt;ssl_certificate&lt;/code&gt; and &lt;code&gt;ssl_certificate_key&lt;/code&gt; to the corresponding paths.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://hub.docker.com/_/nginx/&quot;&gt;Deploy on Docker&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;See &lt;code&gt;src/nginx/Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build image with tag &lt;code&gt;yourusername/examplenginx&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src/nginx
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build -t yourusername/examplenginx .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run container on image &lt;code&gt;yourusername/examplenginx&lt;/code&gt; with name &lt;code&gt;examplenginx&lt;/code&gt;, publish port &lt;code&gt;80&lt;/code&gt; (and &lt;code&gt;443&lt;/code&gt; for &lt;code&gt;HTTPS&lt;/code&gt;). (&lt;em&gt;Note that -p 8080:8080 is not needed anymore in starting the flask app container, as we will not access this port directly from the browser anymore but instead access this nginx proxy server&lt;/em&gt;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# HTTP&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm --net example -p 80:80 --name examplenginx yourusername/examplenginx

&lt;span class=&quot;c&quot;&gt;# HTTPS, share the directory containing SSL certificate with -v&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -d --rm --net example -p 80:80 -p 443:443 -v /etc/letsencrypt:/etc/letsencrypt --name examplenginx yourusername/examplenginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Open browser and go to &lt;code&gt;http://localhost&lt;/code&gt;. You should see &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Open browser and go to &lt;code&gt;https://localhost&lt;/code&gt;. You should see &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Wrap up the Project with Docker Compose&lt;/h4&gt;

&lt;p&gt;After testing individual containers, you can wrap all the commands up into a single &lt;code&gt;docker-compose.yml&lt;/code&gt; file, and everything can be started in a single command. All the parameters passed in to the commands when you started the containers are now specified in &lt;code&gt;docker-compose.yml&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker network is not needed anymore, as docker compose creates a default network for all its services. But to build up a more complex network topology, you can create your custom networks in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file as well.&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://runnable.com/docker/docker-compose-networking&quot;&gt;Deploy with Docker Compose&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;See &lt;code&gt;src/docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start docker compose&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTTP&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Open browser and go to &lt;code&gt;http://localhost&lt;/code&gt;. You should see &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTTPS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Open browser and go to &lt;code&gt;https://localhost&lt;/code&gt;. You should see &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h4&gt;Debug Tips&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use &lt;code&gt;-it&lt;/code&gt; to run containers in interactive mode so that you can test, view logs, curl other containers, etc. under the environment the app is run in&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run -it --rm -p 8080:8080 --net example --name exampleflask yourusername/exampleflask /bin/bash
  &amp;gt; root@abcdefghijkl:~#

  &lt;span class=&quot;c&quot;&gt;# try curl other containers in the same network&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;root@abcdefghijkl:~# apt-get -qq update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -yqq install curl
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;root@abcdefghijkl:~# curl &amp;lt;other-container&amp;gt;:&amp;lt;port&amp;gt;
  &amp;gt; ...

  &lt;span class=&quot;c&quot;&gt;# list networks&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;root@abcdefghijkl:~# cat /etc/hosts
  &amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Print the logs of a container&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker logs exampleflask
  &amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List the running containers to ensure they didn&amp;#39;t encounter errors&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
  CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                    NAMES
  abcdefghijkl        yourusername/exampleflask   &lt;span class=&quot;s2&quot;&gt;&quot;gunicorn --bind 0...&quot;&lt;/span&gt;   some &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;ago       Up some &lt;span class=&quot;nb&quot;&gt;time        &lt;/span&gt;0.0.0.0:8080-&amp;gt;8080/tcp   exampleflask
  mnopqrstuvwx        yourusername/exampleredis   &lt;span class=&quot;s2&quot;&gt;&quot;docker-entrypoint...&quot;&lt;/span&gt;   some &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;ago       Up some &lt;span class=&quot;nb&quot;&gt;time        &lt;/span&gt;6379/tcp                 exampleredis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List information of the network to ensure the containers are run within&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker network inspect example
  &amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;example&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;Id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;Created&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;Scope&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;local&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;Driver&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;bridge&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;EnableIPv6&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
          // ...other properties
          &lt;span class=&quot;s2&quot;&gt;&quot;Containers&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;s2&quot;&gt;&quot;Name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;exampleredis&quot;&lt;/span&gt;,
                  &lt;span class=&quot;s2&quot;&gt;&quot;EndpointID&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;&lt;/span&gt;,
                  &lt;span class=&quot;s2&quot;&gt;&quot;MacAddress&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;aa:bb:cc:dd:ee:ff&quot;&lt;/span&gt;,
                  &lt;span class=&quot;s2&quot;&gt;&quot;IPv4Address&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;w.x.y.z/a&quot;&lt;/span&gt;,
                  &lt;span class=&quot;s2&quot;&gt;&quot;IPv6Address&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
              // ...other container info
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
          // ...other properties
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;Official Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.patricksoftwareblog.com/how-to-configure-nginx-for-a-flask-web-application/&quot;&gt;How to Configure NGINX for a Flask Web Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.codeship.com/orchestrate-containers-for-development-with-docker-compose/&quot;&gt;Orchestrate Containers for Development with Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smartfile.com/blog/dockerizing-a-python-flask-application/&quot;&gt;Dockerizing a Python Flask Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/samples/redis/&quot;&gt;Docker Redis Samples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://runnable.com/docker/docker-compose-networking&quot;&gt;Docker Compose Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 04 Aug 2017 00:00:00 +0900</pubDate>
        <link>/tutorial/devops/docker/2017/08/04/getting-started-with-docker-running-flask-redisdb-and-nginx.html</link>
        <guid isPermaLink="true">/tutorial/devops/docker/2017/08/04/getting-started-with-docker-running-flask-redisdb-and-nginx.html</guid>
        
        <category>docker</category>
        
        <category>flask</category>
        
        <category>redisdb</category>
        
        <category>nginx</category>
        
        
        <category>Tutorial</category>
        
        <category>DevOps</category>
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>Nginx Server SSL Setup on AWS EC2 Linux with Letsencrypt</title>
        <description>&lt;p&gt;This post is a followup on &lt;a href=&quot;https://pyliaorachel.github.io/blog/tech/system/2017/07/07/flask-app-with-gunicorn-on-nginx-server-upon-aws-ec2-linux.html&quot;&gt;my previous post on setting up an nginx server on AWS EC2 instance&lt;/a&gt;, and now we are going to support HTTPS to secure our website using a free SSL certificate authority (CA) &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;letsencrypt&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;p&gt;Before you start:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Obtain a domain name and set it up in your EC2 console to point to the public DNS.&lt;/li&gt;
&lt;li&gt;Understand the basic mechanism of &lt;a href=&quot;https://letsencrypt.org/how-it-works/&quot;&gt;letsencrypt&lt;/a&gt;. This is key to understanding why your setup does or does not work.&lt;/li&gt;
&lt;li&gt;Remember to open up 443 port and allow source from &lt;code&gt;0.0.0.0/0&lt;/code&gt; in your EC2 console so that ACME can hit on you.&lt;/li&gt;
&lt;li&gt;We are going to use &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt;, which handles all the tedious works to communicate with &lt;code&gt;letsencrypt&lt;/code&gt; for us. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And here are the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Obtain the certificate using &lt;code&gt;certbot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify your &lt;code&gt;nginx&lt;/code&gt; configuration to enable SSL&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Obtain the Certificate&lt;/h4&gt;

&lt;p&gt;Get &lt;code&gt;certbot&lt;/code&gt; first:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://dl.eff.org/certbot-auto
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod a+x certbot-auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several plugins to use to help us retrieve the certificate. Two popular ones are &lt;a href=&quot;http://letsencrypt.readthedocs.io/en/latest/using.html#webroot&quot;&gt;webroot&lt;/a&gt; and &lt;a href=&quot;http://letsencrypt.readthedocs.io/en/latest/using.html#standalone&quot;&gt;standalone&lt;/a&gt;. If you do not want to stop your server, use &lt;code&gt;webroot&lt;/code&gt;; if you do not want to use existing server software, use &lt;code&gt;standalone&lt;/code&gt;. We will use &lt;code&gt;standalone&lt;/code&gt; below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;Using webroot&lt;/h6&gt;

&lt;p&gt;To retrieve the certificate from the CA, your server needs to solve some &lt;a href=&quot;http://letsencrypt.readthedocs.io/en/latest/using.html#getting-certificates-and-choosing-plugins&quot;&gt;challenges&lt;/a&gt;. The challenge is elaborated &lt;a href=&quot;https://letsencrypt.org/how-it-works/&quot;&gt;here&lt;/a&gt;. If you choose to use &lt;code&gt;webroot&lt;/code&gt; as the plugin, the thing to note is that the configuration of your server needs to be able to serve the files created in &lt;code&gt;${webroot}/.well-known/acme-challenge&lt;/code&gt;. You might want to verify that &lt;code&gt;GET /.well-known/acme-challenge&lt;/code&gt; is accessible first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To run as standalone, remember to close your services that listen on 80 or 443 ports.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s write a config file first. We&amp;#39;ll use &lt;code&gt;example.com&lt;/code&gt; as our domain name. At &lt;code&gt;/etc/letsencrypt/configs/example.com.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;c&quot;&gt;# domains to retrieve certificate
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domains&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# increase key size
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsa&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# the CA endpoint server
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;acme&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;v01&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;letsencrypt&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# the email to receive renewal reminders, IIRC
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;@&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# turn off the ncurses UI, we want this to be run as a cronjob
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;code&gt;certbot&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./certbot-auto --standalone --config /etc/letsencrypt/configs/example.com.conf certonly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can skip the above config file as well:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./certbot-auto --standalone -d example.com certonly
&lt;span class=&quot;c&quot;&gt;# ...Answer some config questions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you should see &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;
IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/example.com/fullchain.pem. Your cert will
   expire on xxxx-xx-xx. To obtain a new version of the certificate in
   the future, simply run Let's Encrypt again.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can verify that the certificate and keys exist:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Certificate
/etc/letsencrypt/live/example.com/cert.pem

# Full Chain 
/etc/letsencrypt/live/example.com/fullchain.pem

# Private Key 
/etc/letsencrypt/live/example.com/privkey.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Modify &lt;code&gt;nginx&lt;/code&gt; configuration&lt;/h4&gt;

&lt;p&gt;Now you&amp;#39;ve got the certificate, we need to configure the nginx for it to take up HTTPS requests.&lt;/p&gt;

&lt;p&gt;Open up your &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; and modify:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;...

&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {

    ...

    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;         /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;

        &lt;span class=&quot;c&quot;&gt;# Load configuration files for the default server block.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;/*.&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;;

        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;c&quot;&gt;# redirect to HTTPS
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;://$&lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;$&lt;span class=&quot;n&quot;&gt;request_uri&lt;/span&gt;;
        }

        ...
    }

    &lt;span class=&quot;c&quot;&gt;# Settings for a TLS enabled server.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;         /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;

        &lt;span class=&quot;n&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/letsencrypt/live/example.com/fullchain.pem&quot;&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/etc/letsencrypt/live/example.com/privkey.pem&quot;&lt;/span&gt;;

        &lt;span class=&quot;c&quot;&gt;# Automatically route HTTP to HTTPS
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;add_header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Strict&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;max-age=31536000&quot;&lt;/span&gt;;

        &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;/*.&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;;

        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;c&quot;&gt;# These are esstential, or your flask app may not correctly redirect
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Real&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;IP&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;remote_addr&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Forwarded&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Proto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Forwarded&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;;
            &lt;span class=&quot;n&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Forwarded&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;For&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;proxy_add_x_forwarded_for&lt;/span&gt;;

            &lt;span class=&quot;c&quot;&gt;# Pass to our WSGI server
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;ec2&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;;
        }

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload your &lt;code&gt;nginx&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo service nginx reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you should access your website using &lt;code&gt;https&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Not that the certificate expires in 3 months, so you may want to refer to the nice tutorials in the reference links to set up a cron job and make the renewals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;Debug Tips&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Logs reside in &lt;code&gt;/var/log/letsencrypt/letsencrypt.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If there are permissoin problems, run &lt;code&gt;sudo su - nginx -s /bin/bash -c &amp;quot;ls /home/ec2-user/myproject/myproject.sock&amp;quot;&lt;/code&gt; to test permission from the viewpoint of &lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://letsencrypt.readthedocs.io/en/latest/using.html&quot;&gt;Certbot Userguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/going-https-on-amazon-ec2-ubuntu-14-04-with-lets-encrypt-certbot-on-nginx-696770649e76&quot;&gt;Using the Let’s Encrypt Certbot to get HTTPS on your Amazon EC2 NGINX box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/xrstf/581981008b6be0d2224f&quot;&gt;Let&amp;#39;s Encrypt on Ubuntu 14.04, nginx with webroot auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://loune.net/2016/01/https-with-lets-encrypt-ssl-and-nginx/&quot;&gt;HTTPS with Let’s Encrypt SSL and Nginx (using certbot)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nouveauframework.org/blog/installing-letsencrypts-free-ssl-amazon-linux/&quot;&gt;Installing LetsEncrypt’s free SSL on Amazon Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 00:00:00 +0900</pubDate>
        <link>/blog/tech/system/2017/07/14/nginx-server-ssl-setup-on-aws-ec2-linux-with-letsencrypt.html</link>
        <guid isPermaLink="true">/blog/tech/system/2017/07/14/nginx-server-ssl-setup-on-aws-ec2-linux-with-letsencrypt.html</guid>
        
        <category>ssl</category>
        
        <category>letsencrypt</category>
        
        <category>nginx</category>
        
        <category>aws</category>
        
        
        <category>Blog</category>
        
        <category>Tech</category>
        
        <category>System</category>
        
      </item>
    
      <item>
        <title>Flask App with Gunicorn on Nginx Server upon AWS EC2 Linux</title>
        <description>&lt;p&gt;The whole setup is modified from this &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04&quot;&gt;tutorial&lt;/a&gt;,
with the pain and gain from the alternative deployment on an AWS EC2 Linux server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup Environment&lt;/li&gt;
&lt;li&gt;Creating a Flask App&lt;/li&gt;
&lt;li&gt;Binding with Gunicorn&lt;/li&gt;
&lt;li&gt;Creating an Upstart Script for Running Gunicorn Server&lt;/li&gt;
&lt;li&gt;Running with Nginx on AWS EC2&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h4&gt;Setup Environment&lt;/h4&gt;

&lt;p&gt;Install python development tools &amp;amp; &lt;code&gt;nginx&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo yum update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo yum install python-pip python-dev nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;code&gt;virtualenv&lt;/code&gt; from &lt;code&gt;pip&lt;/code&gt; so that the python packages for the flask app will be in isolation.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the project &amp;amp; setup the virtual environment.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# create project&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir myproject
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myproject

&lt;span class=&quot;c&quot;&gt;# create virtualenv&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;virtualenv venv

&lt;span class=&quot;c&quot;&gt;# activate virtualenv&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the prompt should look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;(venv)user@host:~/myproject$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Creating a Flask App&lt;/h4&gt;

&lt;p&gt;Install the dependencies under your virtualenv.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;(venv)user@host:~/myproject$ &lt;/span&gt;pip install gunicorn flask
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the app entry file &lt;code&gt;~/myproject/app.py&lt;/code&gt; and write the simplest flask app:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@application.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'8080'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note that you need to make sure your app is run on an allowed port of the EC2 instance. 
Check which ports are allowed under &lt;code&gt;AWS EC2 Dashboard &amp;gt; Instances &amp;gt; (select your instance) &amp;gt; Security groups &amp;gt; view inbound rules&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Test your flask app.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;(venv)user@host:~/myproject$ &lt;/span&gt;python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to your browser and enter the url to your server, appending the port number you specified in &lt;code&gt;app.py&lt;/code&gt;. 
You should see &lt;code&gt;Hello World!&lt;/code&gt; displayed.&lt;/p&gt;

&lt;h4&gt;Binding with Gunicorn&lt;/h4&gt;

&lt;p&gt;Create the WSGI entrypoint &lt;code&gt;~/myproject/wsgi.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;(venv)user@host:~/myproject$ &lt;/span&gt;gunicorn --bind 0.0.0.0:8080 wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;If you didn&amp;#39;t name your app as &lt;code&gt;application&lt;/code&gt;, for example as &lt;code&gt;app&lt;/code&gt;, 
use &lt;code&gt;wsgi:app&lt;/code&gt; instead of &lt;code&gt;wsgi&lt;/code&gt;, since &lt;code&gt;application&lt;/code&gt; is the name to be picked up by default.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go to your browser again and read the &lt;code&gt;Hello World!&lt;/code&gt; response.&lt;/p&gt;

&lt;h4&gt;Creating an Upstart Script for Running Gunicorn Server&lt;/h4&gt;

&lt;p&gt;Now let&amp;#39;s make Linux automatically start the server upon booting by providing the upstart script.&lt;/p&gt;

&lt;p&gt;Create a configuration file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo vim /etc/init/myproject.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Write a little more complicated version than the original tutorial to help you debug:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Gunicorn application server running myproject&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runlevel&lt;/span&gt; [&lt;span class=&quot;m&quot;&gt;2345&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runlevel&lt;/span&gt; [!&lt;span class=&quot;m&quot;&gt;2345&lt;/span&gt;]

&lt;span class=&quot;n&quot;&gt;respawn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PATH&lt;/span&gt;=/&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;ec2&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;venv&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;myproject&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USERNAME&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;ec2-user&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Main script to be run
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Ready to run...&quot;&lt;/span&gt; &amp;gt;&amp;gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;/$&lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOME&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;/home/ec2-user&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; $$ &amp;gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;/$&lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;ec2&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# exec sudo -u ec2-user gunicorn --workers 3 --bind unix:myproject.sock -m 000 wsgi &amp;gt;&amp;gt; /var/log/$PROGRAM_NAME.sys.log 2&amp;gt;&amp;amp;1
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# exec su -s /bin/sh -c 'exec &quot;$0&quot; &quot;$@&quot;' ec2-user -- gunicorn --workers 3 --bind unix:myproject.sock -m 000 wsgi &amp;gt;&amp;gt; /var/log/$PROGRAM_NAME.sys.log 2&amp;gt;&amp;amp;1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gunicorn&lt;/span&gt; --&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; --&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;:&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;000&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wsgi&lt;/span&gt; &amp;gt;&amp;gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;/$&lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Script for debug purpose, run before starting
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Starting&quot;&lt;/span&gt; &amp;gt;&amp;gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;/$&lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Script for debug purpose, run before stopping
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;/$&lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;/
    &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Stopping&quot;&lt;/span&gt; &amp;gt;&amp;gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;/$&lt;span class=&quot;n&quot;&gt;PROGRAM_NAME&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; is for running the server under our virtual environment&lt;/li&gt;
&lt;li&gt;Note the commented out &lt;code&gt;exec&lt;/code&gt; scripts that produce errors; 
I intended to switch user by doing that, since &lt;code&gt;setuid&lt;/code&gt; and &lt;code&gt;setgid&lt;/code&gt; is not supported on EC2 Linux instance. 
These commands are from &lt;a href=&quot;https://www.thedevopsdoctors.com/blog/2016/4/8/init-scripts-for-web-apps-on-linux-and-why-you-should-be-using-them&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://deepumohan.com/tech/setting-up-apache-airflow-on-aws-ec2-instance/&quot;&gt;places&lt;/a&gt; and &lt;a href=&quot;https://serverfault.com/questions/357060/how-should-i-use-sudo-from-an-upstart-script&quot;&gt;here&lt;/a&gt;. Feel free to provide a correct version...
So now the server is run under &lt;code&gt;root&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt; flag is the umask; for umask value &lt;code&gt;000&lt;/code&gt;, the permission would be &lt;code&gt;777&lt;/code&gt;. This is insecure though, but since I have not found a way to set the access right to a specific user and group, the hooking with nginx only works when the permission is allowed for all users (as the nginx server we will set up later runs as user &lt;code&gt;nginx&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Echos and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; are for debugging; see the logs at &lt;code&gt;/var/log/myproject.sys.log&lt;/code&gt; if you cannot start your server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Test it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;# reload configuration files from /etc/init/*.conf&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo initctl reload-configuration

&lt;span class=&quot;c&quot;&gt;# see if the new job is listed&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo initctl list

&lt;span class=&quot;c&quot;&gt;# try start your server (job); the job name is without the '.conf' extension&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo initctl start myproject

&lt;span class=&quot;c&quot;&gt;# if job is not listed, or error displays and says 'myproject' is not known, there's probably errors in the conf file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# fix them and go on&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# check if it's actually running&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo initctl status myproject
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;myproject start/running, process xxxx

&lt;span class=&quot;c&quot;&gt;# or check with&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ps aux | grep gunicorn

&lt;span class=&quot;c&quot;&gt;# if the job is not running, see the log at '/var/log/myproject.sys.log'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# you can echo more messages in the conf file for your own debug purpose&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# you should also notice a socket file created at '/home/ec2-user/myproject/myproject.sock'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Running with Nginx on AWS EC2&lt;/h4&gt;

&lt;p&gt;Now setup the nginx server to redirect the traffic received at port 80 (http) to the WSGI (Gunicorn) server running at the unix socket.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; file, find the section and write:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-conf&quot; data-lang=&quot;conf&quot;&gt;...
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_server&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       [::]:&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_server&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &amp;lt;&lt;span class=&quot;n&quot;&gt;your&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&amp;gt;;                                    &lt;span class=&quot;c&quot;&gt;# &amp;lt;- replace with your own one
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;         /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;

        ...

        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
            &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;unix&lt;/span&gt;:/&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;ec2&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;myproject&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;# &amp;lt;- add this
&lt;/span&gt;        }

        ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will route the traffic to the specified socket.&lt;/p&gt;

&lt;p&gt;Test it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo nginx -t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If ok, start the server:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to the browser, and without specifying the port number now (default to 80). The request will hit the nginx proxy server, and the nginx server will pass it to the WSGI server, which talks to the flask app. Check if it successfully returns &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If not, there may be multiple reasons. The one that I encountered is solved by changing the permission of the home directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod 711 /home/ec2-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember to restart.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;Debug Tips&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;Echo message to &lt;code&gt;/var/log/xxx.sys.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tail -f /var/log/nginx/access.log&lt;/code&gt; to check nginx logs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netstat -anp | less&lt;/code&gt; to show network status&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04&quot;&gt;How To Serve Flask Applications with Gunicorn and Nginx on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html#conf_structure&quot;&gt;NGINX Beginner&amp;#39;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 07 Jul 2017 00:00:00 +0900</pubDate>
        <link>/blog/tech/system/2017/07/07/flask-app-with-gunicorn-on-nginx-server-upon-aws-ec2-linux.html</link>
        <guid isPermaLink="true">/blog/tech/system/2017/07/07/flask-app-with-gunicorn-on-nginx-server-upon-aws-ec2-linux.html</guid>
        
        <category>flask</category>
        
        <category>gunicorn</category>
        
        <category>nginx</category>
        
        <category>aws</category>
        
        
        <category>Blog</category>
        
        <category>Tech</category>
        
        <category>System</category>
        
      </item>
    
      <item>
        <title>ESP8266 with Arduino - Trials and Errors</title>
        <description>&lt;p&gt;ESP8266 is a popular WiFi module for its extremely affordable price. However, more errors tend to be encountered during the setup of this primitive module. &lt;/p&gt;

&lt;p&gt;In this tutorial, the basic steps of setting up ESP8266 through an Arduino board would be covered, and some personal trials and errors will be shared in hope to save people&amp;#39;s time and life if they are stuck with the same problems as I did.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;I am actually an Arduino beginner and a software person. But in turn, I faced more errors than others, managed to solved them, and have more to share with other people who are also new to Arduino and ESP8266 WiFi module!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Introduction &amp;amp; Setup&lt;/h1&gt;

&lt;h2&gt;What is ESP8266?&lt;/h2&gt;

&lt;p&gt;An extremely affordable hardware component ($USD 3) to connect to WiFi. &lt;/p&gt;

&lt;p&gt;Comes with a variety of different models, which are all based on the same chip. The most popular model is ESP-03, which is of similar price to ESP-01 that I will be using in this tutorial, but with more ports (&lt;em&gt;so regretful, should have picked this one&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i2.wp.com/randomnerdtutorials.com/wp-content/uploads/2015/01/all_esp_modules1.png?resize=600%2C337&quot; alt=&quot;ESP models&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Components&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://world.taobao.com/item/40484626466.htm&quot;&gt;ESP8266 WiFi module ESP-01&lt;/a&gt; (or other)&lt;/li&gt;
&lt;li&gt;Arduino Mega board (or others)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://world.taobao.com/item/522587064231.htm?spm=a312a.7700714.0.0.LOoy8V#detail&quot;&gt;Logic level converter&lt;/a&gt; (optional)&lt;/li&gt;
&lt;li&gt;Breadboard, wires, ...&lt;/li&gt;
&lt;li&gt;Arduino IDE (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Before You Start...&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you don&amp;#39;t know what &lt;strong&gt;AT command&lt;/strong&gt; is, &lt;strong&gt;DON&amp;#39;T SKIP THE SECTION INTRODUCING IT&lt;/strong&gt;. I&amp;#39;ll make it simple, I promise, but don&amp;#39;t directly dive into writing the codes before you know the basics of AT commands, like I did - you&amp;#39;ll end up wasting more time dealing with errors.&lt;/li&gt;
&lt;li&gt;Always start with the most basic examples.&lt;/li&gt;
&lt;li&gt;Just to let you know, &lt;strong&gt;Arduino is not necessary for you to program ESP8266&lt;/strong&gt;. Interestingly, more tutorials I found online deal with it with a USB to serial converter such as the &lt;strong&gt;FTDI232R&lt;/strong&gt; module. Follow this tutorial if you have an Arduino board with you, or else you can follow the nice tutorials I took reference on in the reference list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arduino IDE is also not mandatory&lt;/strong&gt;, there are other ways to write program and upload to ESP8266. But I didn&amp;#39;t do research on it, as that is not my intention for my project.&lt;/li&gt;
&lt;li&gt;Setting up a bare ESP8266 module without other assisting development board is &lt;strong&gt;FRUSTRATING&lt;/strong&gt;. If you don&amp;#39;t have as much confidence as I did and are just finding a quick way to hack it out for assignments without budget concerns, then go ahead and buy any of those development borads and make your life easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Getting Started!&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Hooking up ESP8266 + Sending AT Commands&lt;/li&gt;
&lt;li&gt;Programing ESP8266&lt;/li&gt;
&lt;li&gt;Examples

&lt;ol&gt;
&lt;li&gt;Client Example - Programming ESP8266 Like Arduino&lt;/li&gt;
&lt;li&gt;Client Example - Talking to ESP8266 via Arduino&lt;/li&gt;
&lt;li&gt;Server Example - Programming ESP8266 Like Arduino&lt;/li&gt;
&lt;li&gt;Server Example - Talking to ESP8266 via Arduino&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;1. Hooking Up ESP8266 + Sending AT Commands&lt;/h2&gt;

&lt;p&gt;Here are the pins for ESP-01 model:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/ESP8266-pins.png&quot; alt=&quot;pins&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Connections&lt;/h3&gt;

&lt;div style='margin-bottom: 5px;'&gt;
    &lt;img src='https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/circuit_1.jpg' width='32%'/&gt;
    &lt;img src='https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/circuit_2.jpg' width='32%'/&gt;
    &lt;img src='https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/circuit_4.jpg' width='32%'/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/circuit_3.jpg&quot; alt=&quot;connections&quot;&gt;&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;ESP8266&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;Arduino&lt;/th&gt;
&lt;th style=&quot;text-align: center&quot;&gt;Others&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Vcc&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;3.3V&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Power supply&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;GND&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;GND&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;GND&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Ground&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;URXD&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Rx / Tx&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Receive data in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;UTXD&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Tx / Rx&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Transmit data out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;CH_PD&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Normally 3.3V&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Chip power down&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;RST&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;3.3V for normal operations / GND for reset&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Reset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;GPIO0&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;- for normal operations / GND for flashing firmware&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;General purpose I/O pins, but used in flashing firmware&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;GPIO2&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;General purpose I/O pin&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h5&gt;Key Notes&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;NEVER connect Vcc and other pins to 5V.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;ESP8266 operates on 3.3V; connecting pins to 5V may damage the module.&lt;/li&gt;
&lt;li&gt;For Rx/Tx pins, the one receiving data through Arduino board should theoretically also be logically shifted down to 3.3V; but many people didn&amp;#39;t encounter problem connecting them directly to each other&amp;#39;s pins, including me.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DON&amp;#39;T connect 3.3V power pin of Arduino to ESP8266. Use a logic level converter to bring 5V down to 3.3V.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The max limit of current flowing out of that pin is around 50 mA, which usually is not enough. That&amp;#39;s why we need a &lt;strong&gt;logic level converter&lt;/strong&gt;; there are &lt;a href=&quot;http://randomnerdtutorials.com/how-to-level-shift-5v-to-3-3v/&quot;&gt;other ways&lt;/a&gt; to bring 5V down to 3.3V, but using logic level converter ensures a better transmission performance. You can also connect it to external power source, which should be the best way to ensure stability.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rx-Rx, Tx-Tx: uploading program from computer to ESP8266 via Arduino board; Rx-Tx, Tx-Rx: letting Arduino board talk to ESP8266.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Think of Rx-Rx, Tx-Tx as making Arduino board a channel between the computer and ESP8266; whatever goes to the Arduino board goes to ESP8266, and whatever ESP8266 sends back goes to the computer.&lt;/li&gt;
&lt;li&gt;Think of Rx-Tx, Tx-Rx as making Arduino talk to ESP8266, so probably you would have some program in Arduino sending and receiving data/commands via its own serial ports.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I don&amp;#39;t know what CH_PD port does. Normally just leave it at 3.3V.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If thinking of ESP8266 as an Arduino board, then Rx, Tx, GPIO0, and GPIO2 are the possible digital pins, where Rx/Tx are the predefined Serial ports.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;If you are programming directly into ESP8266, then when using up Rx and Tx, you would probably find yourself out of Serial ports for debugging. I&amp;#39;m not sure how it can be solved, but probably you can &lt;a href=&quot;https://github.com/esp8266/Arduino/blob/master/doc/reference.md&quot;&gt;set GPIO2 as the TX pin for debugging&lt;/a&gt; or &lt;a href=&quot;http://www.forward.com.au/pfod/ESP8266/GPIOpins/index.html&quot;&gt;extend your ports&lt;/a&gt;. Not sure if they make sense for ESP-01 model (try it and tell me).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.forward.com.au/pfod/ESP8266/GPIOpins/index.html&quot;&gt;Learn more on GPIO ports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Basics of AT Commands&lt;/h3&gt;

&lt;p&gt;If you have experience using terminals, then AT commands are of the same concept as those commands you put into the terminal. In terminal, when you input &lt;code&gt;ls&lt;/code&gt; and send, some programs would be run, then some outputs would be sent back to your terminal window and shown. You interact via the terminal with your computer software with a set of commands available.&lt;/p&gt;

&lt;p&gt;Similarly, &lt;strong&gt;you interact via the serial monitor with your ESP8266 with a set of AT commands available&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Simple, isn&amp;#39;t it? Instead of guiding you through how to send the various AT commands, I&amp;#39;ll only use 2 AT commands to test the module in the following section - &lt;code&gt;AT&lt;/code&gt; and &lt;code&gt;AT+GMR&lt;/code&gt;. You should try more yourself looking at &lt;a href=&quot;https://www.espressif.com/sites/default/files/documentation/4a-esp8266_at_instruction_set_en.pdf&quot;&gt;this doc&lt;/a&gt;, including how to scan for available WiFis and connect to them via AT commands, but I do not tend to terrify you with a bunch of those commands, as they are not needed if you are using libraries that wraps up those commands for you.&lt;/p&gt;

&lt;p&gt;But knowing how this mechanism drives the interaction with ESP8266 is essential in effective comprehension of the libraries used in the following sections.&lt;/p&gt;

&lt;h3&gt;Testing with Andruino IDE&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Rx, Tx-Tx, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
Note that you are directly talking to ESP8266 via Arduino board as a channel.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect and power up your Arduino board &amp;amp; ESP8266&lt;/li&gt;
&lt;li&gt;Make sure you Arduino board isn&amp;#39;t loaded with other programs. Either reset your Arduino baord, or upload a &lt;code&gt;BareMinimum&lt;/code&gt; example program to it&lt;/li&gt;
&lt;li&gt;Open up Arduino IDE, select &lt;code&gt;Tools &amp;gt; Port &amp;gt; YourConnectedPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open up &lt;code&gt;Serial Monitor&lt;/code&gt;, and listen to baudrate &lt;code&gt;115200&lt;/code&gt;. You may see some messages bump up; those should be from ESP8266. Recognize the &lt;code&gt;ready&lt;/code&gt; message at the end. See image in step 7

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Try other baudrates if you are seeing random symbols, or seeing nothing&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Both NL &amp;amp; CR&lt;/code&gt; option - it adds &lt;code&gt;\r\n&lt;/code&gt; after your input line. Necessary for sending a valid AT command&lt;/li&gt;
&lt;li&gt;Input &lt;code&gt;AT&lt;/code&gt; in your input box and press &lt;code&gt;enter&lt;/code&gt;. You should see the response &lt;code&gt;OK&lt;/code&gt; from ESP8266
&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/AT.png&quot; alt=&quot;AT&quot;&gt;&lt;/li&gt;
&lt;li&gt;Input &lt;code&gt;AT+GMR&lt;/code&gt; in your input box and press &lt;code&gt;enter&lt;/code&gt;. You should see the version information of your ESP8266
&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/AT+GMR.png&quot; alt=&quot;AT+GMR&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything shown is as expected, congratulations, your ESP8266 is working, and you can move on to the programming section. If not, then go to the troubleshooting section for help.&lt;/p&gt;

&lt;h4&gt;Alternative1: Testing with PuTTY on Windows&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Rx, Tx-Tx, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
Note that you are directly talking to ESP8266 via Arduino board as a channel.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect and power up your Arduino board &amp;amp; ESP8266&lt;/li&gt;
&lt;li&gt;Make sure you Arduino board isn&amp;#39;t loaded with other programs. Either reset your Arduino baord, or upload a &lt;code&gt;BareMinimum&lt;/code&gt; example program to it if so&lt;/li&gt;
&lt;li&gt;Check the serial port number of your device under &lt;code&gt;Device Manager &amp;gt; Ports &amp;gt; USB Serial Port&lt;/code&gt; or &lt;code&gt;Arduino IDE &amp;gt; Tools &amp;gt; Port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open up PuTTY, select &lt;code&gt;Connection type &amp;gt; Serial&lt;/code&gt;, input &lt;code&gt;Serial line &amp;gt; COMX&lt;/code&gt; where &lt;code&gt;COMX&lt;/code&gt; is your connected serial port number, &lt;code&gt;Speed &amp;gt; 115200&lt;/code&gt; or other baudrates that work. Press &lt;code&gt;Open&lt;/code&gt;. Some messages bump up as in Arduino IDE&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;AT&lt;/code&gt;, &lt;strong&gt;hold down &lt;code&gt;Ctrl&lt;/code&gt; key, press &lt;code&gt;m&lt;/code&gt; key, press &lt;code&gt;j&lt;/code&gt; key, release &lt;code&gt;Ctrl&lt;/code&gt; key&lt;/strong&gt;. This sends an &lt;code&gt;AT&lt;/code&gt; command ending with &lt;code&gt;\r\n&lt;/code&gt;. You should see the response &lt;code&gt;OK&lt;/code&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/AT_PUTTY.png&quot; alt=&quot;AT&quot;&gt;&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;AT+GMR&lt;/code&gt; and do the same thing as above. You should see the version information
&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/AT+GMR_PUTTY.png&quot; alt=&quot;AT+GMR&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Alternative2: Testing with Arduino Board&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Tx1, Tx-Rx1, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating for Mega; Rx-D2, Tx-D3, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating for Uno.&lt;/em&gt;&lt;br&gt;
Note that your Arduino board is the one talking to ESP8266.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect and power up your Arduino board &amp;amp; ESP8266&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up a new Arduino &lt;code&gt;BareMinimum&lt;/code&gt; example, copy and paste the following code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For boards with more than 1 hardware serial ports e.g. Mega
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// Debug message talking on baudrate 115200
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Serial1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// ESP talking on baudrate 115200
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// ESP wants to talk to you
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Log out what ESP wants to say
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// You want to talk to ESP (you input and send something via the input field)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Read 1 byte (1 char) at a time
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Serial1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Tell ESP your words/commands 1 byte (1 char) at a time
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Serial&lt;/code&gt; is for logging your debug message; &lt;code&gt;Serial1&lt;/code&gt; is the &lt;code&gt;Tx1/Rx2&lt;/code&gt; pair which your ESP module is connected to.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// For boards with only 1 hardware serial port e.g. Uno, we have to use SoftwareSerial ports, i.e. take other digital output pins as your serial port
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;SoftwareSerial.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoftwareSerial&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* RX:D3, TX:D2 */&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// Debug message talking on baudrate 115200
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// ESP talking on baudrate 115200
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// ESP wants to talk to you
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Log out what ESP wants to say
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// You want to talk to ESP (you input and send something via the input field)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Read 1 byte (1 char) at a time
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ESP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// Tell ESP your words/commands 1 byte (1 char) at a time
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SoftwareSerial&lt;/code&gt; library is necessary if you are having only 1 Serial port and you want it to be the debug port.&lt;/li&gt;
&lt;li&gt;Try &lt;code&gt;AT+GMR&lt;/code&gt; command; if you see the message corrupted, i.e. some parts of the message is somehow not readable, don&amp;#39;t assume you&amp;#39;re ok. see troubleshooting section.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;code&gt;Tools &amp;gt; Board &amp;gt; YourConnectedArduinoBoard&lt;/code&gt;, &lt;code&gt;Tools &amp;gt; Port &amp;gt; YourConnectedPort&lt;/code&gt;. Upload the program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following steps are the same as step 4 ~ step 7 in the main testing method &lt;strong&gt;Testing with Andruino IDE&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;2. Programing ESP8266&lt;/h2&gt;

&lt;p&gt;There are basically 2 ways of using the ESP8266 module: &lt;strong&gt;programming ESP8266 like Arduino&lt;/strong&gt; and &lt;strong&gt;talking to ESP8266 via Arduino&lt;/strong&gt;. Strictly speaking, the latter one may not really mean to &lt;strong&gt;program&lt;/strong&gt; the module; it is the program we upload into Arduino board that sends commands to ESP8266 on behalf of us.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming ESP8266 like Arduino&lt;/strong&gt;: directly upload programs to ESP8266 and treat it like Arduino&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Talking to ESP8266 via Arduino&lt;/strong&gt;: upload program into Arduino board that sends commands to ESP8266 on behalf of us&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I didn&amp;#39;t notice the different programming methods at first, and follow whatever the first tutorial I found online that is workable, that is to &lt;strong&gt;program ESP8266 like Arduino&lt;/strong&gt;. But later I found that I really need another serial port for communication in addition to the debug port! There are workarounds, as stated in &lt;code&gt;Getting Started! &amp;gt; Hooking Up ESP8266 + Sending AT Commands &amp;gt; Connections &amp;gt; Key Notes&lt;/code&gt; in this tutorial, but I was too tired to try so. Then I switched to the other method, in which the debug port is the Mega&amp;#39;s. &lt;/p&gt;

&lt;p&gt;However, the latter method is less stable then the first one, as errors tend to come out more often with the extra communication between Arduino and ESP. Choose whatever suits your purpose the best.&lt;/p&gt;

&lt;h3&gt;Programming ESP8266 Like Arduino&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Rx, Tx-Tx, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
Library: &lt;a href=&quot;https://github.com/esp8266/arduino#installing-with-boards-manager&quot;&gt;esp8266/arduino&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go through the &lt;a href=&quot;https://github.com/esp8266/arduino#installing-with-boards-manager&quot;&gt;installation guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open up any examples under &lt;code&gt;File &amp;gt; Examples &amp;gt; WiFi&lt;/code&gt;, for example, the &lt;code&gt;SimpleWebServerWiFi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the &lt;code&gt;ssid&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; with a reachable WiFi AP at your place

&lt;ul&gt;
&lt;li&gt;See troubleshooting for the requirements on the AP network&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Change the baudrate to a workable one, in our case, &lt;code&gt;115200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Tools &amp;gt; Board &amp;gt; ESP8266 Modules &amp;gt; Generic ESP8266 Module&lt;/code&gt; (or others if you&amp;#39;re not using bare ESP8266), &lt;code&gt;Tools &amp;gt; Port &amp;gt; YourConnectedPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Upload the program to ESP

&lt;ol&gt;
&lt;li&gt;Diconnect power to ESP&lt;/li&gt;
&lt;li&gt;Bring &lt;code&gt;GPIO0&lt;/code&gt; to ground&lt;/li&gt;
&lt;li&gt;Power up ESP&lt;/li&gt;
&lt;li&gt;Pull out &lt;code&gt;GPIO0&lt;/code&gt; to float&lt;/li&gt;
&lt;li&gt;Click the upload button in IDE&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;You should see something like this:
&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/Upload_to_ESP.png&quot; alt=&quot;Upload to ESP&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Talking to ESP8266 via Arduino&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Tx1, Tx-Rx1, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
Library: &lt;a href=&quot;https://github.com/itead/ITEADLIB_Arduino_WeeESP8266&quot;&gt;itead/ITEADLIB_Arduino_WeeESP8266&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the library

&lt;ol&gt;
&lt;li&gt;Download the library as a &lt;code&gt;zip&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;Sketch &amp;gt; Include Libaray&lt;/code&gt;, select &lt;code&gt;Add .ZIP Library...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Choose your downloaded &lt;code&gt;zip&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Open up any examples under &lt;code&gt;File &amp;gt; Examples &amp;gt; ITEADLIB_Arduino_WeeESP8266&lt;/code&gt;, for example, the &lt;code&gt;ConnectWiFi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the &lt;code&gt;ssid&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; with a reachable WiFi AP at your place

&lt;ul&gt;
&lt;li&gt;See troubleshooting for the requirements on the AP network&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Change the baudrate to a workable one, in our case, &lt;code&gt;115200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Tools &amp;gt; Board &amp;gt; Arduino AVR Boards &amp;gt; Arduino/Genuino Mega or Mega2560&lt;/code&gt; (or others), &lt;code&gt;Tools &amp;gt; Port &amp;gt; YourConnectedPort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Upload the program to Arduino board&lt;/li&gt;
&lt;li&gt;Open up the serial monitor, and you should see messages showing the program interacting with ESP&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;3. Examples&lt;/h2&gt;

&lt;p&gt;The examples are modified from the ones included in the libraries, but I&amp;#39;ll put more comments in the code.&lt;/p&gt;

&lt;h3&gt;1. Client Example - Programming ESP8266 Like Arduino&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Rx, Tx-Tx, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
&lt;code&gt;HTTPClient&lt;/code&gt; is a wrapper of &lt;code&gt;WiFiWebClient&lt;/code&gt;, which is more easy to use. No need to wrap the request message yourself.&lt;br&gt;
Modified from: &lt;a href=&quot;https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/BasicHttpClient/BasicHttpClient.ino&quot;&gt;esp8266/arduino - BasicHttpClient&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Posting values from 0 to 255 onto dweet.io */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;ESP8266WiFi.h&amp;gt;
#include &amp;lt;ESP8266HTTPClient.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MAX 255
#define MIN 0
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://dweet.io/dweet/for/thing-name?value=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// dweet.io is a simple messaging host for IoT devices
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IPAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip_static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;// Use a static IP address
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                   &lt;span class=&quot;c1&quot;&gt;// Gateway should be the IP of your connected hotspot device
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                    &lt;span class=&quot;c1&quot;&gt;// Check subnet  through that device as well
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                             &lt;span class=&quot;c1&quot;&gt;// Serial for debug messages, since we're using ESP like Arduino
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Connect to WiFi network
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Working to connect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Wait for connection
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WL_CONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connected to &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP address: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WL_CONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HTTPClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create URI for the request
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connecting to &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                                  &lt;span class=&quot;c1&quot;&gt;// TCP handshake with host 
&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                                        &lt;span class=&quot;c1&quot;&gt;// GET request, return response
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;httpCode: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;httpCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                                                        &lt;span class=&quot;c1&quot;&gt;// Close TCP connection
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2. Client Example - Talking to ESP8266 via Arduino&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Tx1, Tx-Rx1, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
Modified from: &lt;a href=&quot;https://github.com/itead/ITEADLIB_Arduino_WeeESP8266/blob/master/examples/HTTPGET/HTTPGET.ino&quot;&gt;ITEADLIB_Arduino_WeeESP8266 - HTTPGET&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;ESP8266.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define SSID        &quot;xxx&quot;
#define PASSWORD    &quot;xxx&quot;
#define HOST_NAME   &quot;dweet.io&quot;
#define HOST_PORT   (80)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ESP8266&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serial1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;setup begin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FW Version:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOprToStationSoftAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to station + softap ok&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to station + softap err&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Join AP success&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLocalIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;       
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Join AP failure&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disableMUX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;single ok&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;single err&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;setup end&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createTCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HOST_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;create tcp ok&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;create tcp err&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GET /dweet/for/thing-name?value=1 HTTP/1.1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Host: dweet.io&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Connection: keep-alive&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Received:[&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wifi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;releaseTCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;release tcp ok&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;release tcp err&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. Server Example - Programming ESP8266 Like Arduino&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Connection: Rx-Rx, Tx-Tx, RST-3.3V, GPIO0 &amp;amp; GPIO2 floating.&lt;/em&gt;&lt;br&gt;
Modified from: &lt;a href=&quot;https://learn.adafruit.com/esp8266-temperature-slash-humidity-webserver/code&quot;&gt;Adafruit - ESP8266 Temperature / Humidity Webserver&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;ESP8266WiFi.h&amp;gt;
#include &amp;lt;WiFiClient.h&amp;gt;
#include &amp;lt;ESP8266WebServer.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ESP8266WebServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                           &lt;span class=&quot;c1&quot;&gt;// Listening on port 80
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                                   &lt;span class=&quot;c1&quot;&gt;// String to display
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello from esp8266!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                               &lt;span class=&quot;c1&quot;&gt;// If accessing root, respond this message
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// You can open the Arduino IDE Serial Monitor window to see what the code is doing
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Connect to WiFi network
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Working to connect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Wait for connection
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WL_CONNECTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connected to &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IP address: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WiFi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localIP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                         &lt;span class=&quot;c1&quot;&gt;// If client requests root page, handle it with handle_root subroutine
&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](){&lt;/span&gt;                                                             &lt;span class=&quot;c1&quot;&gt;// If client requests /test page, handle it with the code section 
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;webString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTTP server started&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handleClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                                                &lt;span class=&quot;c1&quot;&gt;// Waiting for clients to connect
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;4. Server Example - Talking to ESP8266 via Arduino&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;To be released.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Trouble Shooting&lt;/h1&gt;

&lt;h4&gt;1. Hooking Up ESP8266 + Sending AT Commands&lt;/h4&gt;

&lt;h6&gt;Testing with Andruino IDE&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;If you do not see &lt;code&gt;ready&lt;/code&gt; as the response message, and you find that you can&amp;#39;t send any commands out or receive any responses, your ESP8266 is probably stuck. Try:

&lt;ul&gt;
&lt;li&gt;Reset: &lt;strong&gt;pull GPIO0 to GND, pull RST to GND, pull RST back to Vcc, pull GPIO0 out to floating&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If not working, power off ESP and power on ESP. Reset again.&lt;/li&gt;
&lt;li&gt;If not working, follow &lt;a href=&quot;https://www.allaboutcircuits.com/projects/update-the-firmware-in-your-esp8266-wi-fi-module/&quot;&gt;this guide&lt;/a&gt; on updating your firmware to the latest version. &lt;strong&gt;This is really recommended!!!&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Download the latest &lt;a href=&quot;http://bbs.espressif.com/viewtopic.php?f=57&amp;amp;t=433&quot;&gt;Flash Download Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the latest &lt;a href=&quot;http://bbs.espressif.com/viewtopic.php?f=46&amp;amp;t=850&quot;&gt;ESP8266 SDK&lt;/a&gt;. Choose &lt;strong&gt;Non-OS SDK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;Testing with Andruino Board&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;#39;re using Arduino Uno and ESP is sending you responses that doesn&amp;#39;t appear readable, the data might be corrupted due to the high baudrate &lt;code&gt;115200&lt;/code&gt; that Arduino Uno cannot withstand, or some voltage level problems. Try:

&lt;ul&gt;
&lt;li&gt;Ensure every GNDs are connected, including the ESP&amp;#39;s and Arduino&amp;#39;s GND pins.&lt;/li&gt;
&lt;li&gt;If not working, lower the baudrate.&lt;/li&gt;
&lt;li&gt;If not working, switch to Mega or other boards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;2. Programing ESP8266&lt;/h4&gt;

&lt;h6&gt;Programming ESP8266 Like Arduino&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you don&amp;#39;t know what &lt;code&gt;ssid&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; are, &lt;code&gt;ssid&lt;/code&gt; is the network name you would see when you want to connect to WiFi in the available WiFi list e.g. &lt;code&gt;eduroam&lt;/code&gt;, and &lt;code&gt;password&lt;/code&gt; is the password. Note that there&amp;#39;s no options for &lt;code&gt;username&lt;/code&gt;, because ESP8266 doesn&amp;#39;t accept enterprise protected access points (WPA2_Enterprise)! So you need to have a private AP available. Some common connection points are from:
&lt;img src=&quot;https://raw.githubusercontent.com/pyliaorachel/pyliaorachel.github.io/master/assets/post_img/available_network_types.png&quot; alt=&quot;Available network types&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your router&lt;/li&gt;
&lt;li&gt;Your mobile phone hotspot&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your shared hotspot from a computer that is connected to network cables&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Under Windows platforms, there is a convenient way to share its network as hotspot:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open command prompt, run:  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;netsh wlan show drivers  
netsh wlan set hostednetwork mode=allow ssid=your-preferred-name key=your-preferred-password
netsh wlan start hostednetwork
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure the network is allowed to be shared&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Windows + r&lt;/code&gt; key, enter &lt;code&gt;ncpa.cpl&lt;/code&gt;. This opens up &lt;code&gt;Network Connections&lt;/code&gt; panel.&lt;/li&gt;
&lt;li&gt;Right-click &lt;code&gt;Wi-Fi &amp;gt; properties&lt;/code&gt;, switch to &lt;code&gt;Sharing&lt;/code&gt; and check the first checkbox under &lt;code&gt;Internet Connection Sharing&lt;/code&gt; that reads &lt;code&gt;Allow other network users to connect...&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test hotspot&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take out your mobile phone, connect to hotspot, and try to go to a website. If everything is fine, then you are good to go.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you cannot see the uploading progress message, but instead see a lot of mysterious errors such as &lt;code&gt;espcomm_open failed&lt;/code&gt;, &lt;code&gt;espcomm_sync failed&lt;/code&gt;, and a whole bunch of other possibilities, try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check your port selection is the right one. Check your circuit connections, ensure the &lt;code&gt;GND&lt;/code&gt;s are connected.&lt;/li&gt;
&lt;li&gt;If not working, repeat the upload process as state in step 6.&lt;/li&gt;
&lt;li&gt;If not working, power off ESP and power on ESP. Upload again.&lt;/li&gt;
&lt;li&gt;If not working, unplug your USB and plug in again. Upload again.&lt;/li&gt;
&lt;li&gt;If not working, follow &lt;a href=&quot;https://www.allaboutcircuits.com/projects/update-the-firmware-in-your-esp8266-wi-fi-module/&quot;&gt;this guide&lt;/a&gt; on updating your firmware to the latest version. &lt;strong&gt;This is really recommended!!!&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Download the latest &lt;a href=&quot;http://bbs.espressif.com/viewtopic.php?f=57&amp;amp;t=433&quot;&gt;Flash Download Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the latest &lt;a href=&quot;http://bbs.espressif.com/viewtopic.php?f=46&amp;amp;t=850&quot;&gt;ESP8266 SDK&lt;/a&gt;. Choose &lt;strong&gt;Non-OS SDK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&amp;#39;re testing as a server, and have no response after you ping the IP address of ESP, try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect you computer with WiFi under the same network as ESP8266&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;Talking to ESP8266 via Arduino&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you&amp;#39;re using Arduino Uno and ESP is sending you responses that doesn&amp;#39;t appear readable, the data might be corrupted due to the high baudrate &lt;code&gt;115200&lt;/code&gt; that Arduino Uno cannot withstand, or some voltage level problems. Try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure every GNDs are connected, including the ESP&amp;#39;s and Arduino&amp;#39;s GND pins.&lt;/li&gt;
&lt;li&gt;If not working, lower the baudrate.&lt;/li&gt;
&lt;li&gt;If not working, switch to Mega or other boards.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&amp;#39;re testing as a server, and have no response after you ping the IP address of ESP, try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect you computer with WiFi under the same network as ESP8266&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So I believe that&amp;#39;s all you need to know to successfully setup an ESP8266 module - ok I guess it&amp;#39;s pretty much. Now you know how frustrating the process might be setting up this WiFi module for a software person, and how the cheap price comes with a huge cost. &lt;/p&gt;

&lt;p&gt;But I believe I was the one who encountered most of the errors people are likely to encounter and managed to solve them somehow, so I hope the troubleshooting part is comprehensive enough to cover all of your problems. To me, every error popped up appeared to have 100 different possible suggested solutions online, and I almost tried all of them to finally identify one possible valid solution, or sometimes even none of them are valid. I have to say, ESP8266 still have its long way to go.&lt;/p&gt;

&lt;p&gt;Finally, I really have to thank the people who wrote the tutorials, instructables, guides, and documentations online, which are mostly included in the following references (cannot put them all). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I will post the sample codes up to GitHub along with a summary of this tutorial as a cheatsheet later if I find time.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;References&lt;/h1&gt;

&lt;p&gt;I bet I&amp;#39;ve searched through 100 webpages along my journey on setting up ESP8266 without an error. The * starred * ones are the recommended ones that really helped me a lot along my way. Others are more or less the same, but I also took reference on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up ESP8266 via USB/TTL converter

&lt;ul&gt;
&lt;li&gt;* &lt;a href=&quot;http://www.instructables.com/id/ESP8266-Wi-fi-module-explain-and-connection/?ALLSTEPS&quot;&gt;ESP8266 Wi Fi Module Explain and Connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rancidbacon.com/files/kiwicon8/ESP8266_WiFi_Module_Quick_Start_Guide_v_1.0.4.pdf&quot;&gt;ESP8266 WiFi Module Quick Start Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.esp8266.com/wiki/doku.php?id=getting-started-with-the-esp8266&quot;&gt;Getting Started with ESP8266&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.allaboutcircuits.com/projects/breadboard-and-program-an-esp-01-circuit-with-the-arduino-ide/&quot;&gt;Breadboard and Program an ESP-01 Circuit with the Arduino IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://randomnerdtutorials.com/how-to-install-esp8266-board-arduino-ide/&quot;&gt;How to Install the ESP8266 Board in Arduino IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://makezine.com/2015/04/01/installing-building-arduino-sketch-5-microcontroller/&quot;&gt;Installing and Building an Arduino Sketch for the $5 ESP8266 Microcontroller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fab.cba.mit.edu/classes/863.14/tutorials/Programming/serialwifi.html&quot;&gt;Serial-to-WiFi Tutorial using ESP8266&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Programming ESP8266 like Arduino

&lt;ul&gt;
&lt;li&gt;* &lt;a href=&quot;https://learn.adafruit.com/esp8266-temperature-slash-humidity-webserver/overview&quot;&gt;ESP8266 Temperature / Humidity Webserver&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A little bit outdated on IDE setup, but the program uploading steps saved my life!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;* &lt;a href=&quot;http://www.whatimade.today/esp8266-easiest-way-to-program-so-far/&quot;&gt;ESP8266 - Easiest way to program so far (Using Arduino IDE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hackster.io/rayburne/esp8266-01-using-arduino-ide-67a124&quot;&gt;ESP8266-01 using Arduino IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.geekstips.com/esp8266-arduino-tutorial-iot-code-example/&quot;&gt;ESP8266 ARDUINO TUTORIAL – WIFI MODULE COMPLETE REVIEW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Talking to ESP8266 via Arduino

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dalpix.com/blog/connecting-your-arduino-wifi-esp-8266-module&quot;&gt;Connecting your Arduino to WiFi via an ESP-8266 module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.instructables.com/id/Beginners-Guide-to-ESP8266-and-Tweeting-Using-ESP8/&quot;&gt;Beginner&amp;#39;s Guide to ESP8266 and Tweeting Using ESP8266&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Note that the author said the connection of Rx/Tx depends on the version of ESP8266. Sorry but I doubt that.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other nice and comprehensive tutorials

&lt;ul&gt;
&lt;li&gt;* &lt;a href=&quot;https://mlwmlw.org/2015/07/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-wifi-%E6%99%B6%E7%89%87-esp8266-with-arduino/&quot;&gt;深入淺出 Wifi 晶片 ESP8266 with Arduino&lt;/a&gt; &lt;em&gt;Chinese&lt;/em&gt; &lt;em&gt;(台灣人好棒棒)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;* &lt;a href=&quot;https://www.allaboutcircuits.com/projects/update-the-firmware-in-your-esp8266-wi-fi-module/&quot;&gt;Update the Firmware in Your ESP8266 Wi-Fi Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other examples

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.homeautomationforgeeks.com/ESP8266_samples.shtml&quot;&gt;ESP8266 Samples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Karang/Ardunet&quot;&gt;Arduino port for ESP8266&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Documentations

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.espressif.com/sites/default/files/documentation/4a-esp8266_at_instruction_set_en.pdf&quot;&gt;AT Command Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://room-15.github.io/blog/2015/03/26/esp8266-at-command-reference/#AT+CIPSTATUS&quot;&gt;ESP8266 - AT Command Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 13 Apr 2017 00:00:00 +0900</pubDate>
        <link>/tutorial/hardware/arduino/2017/04/13/esp8266-with-arduino-trials-and-errors.html</link>
        <guid isPermaLink="true">/tutorial/hardware/arduino/2017/04/13/esp8266-with-arduino-trials-and-errors.html</guid>
        
        <category>arduino</category>
        
        <category>esp8266</category>
        
        
        <category>Tutorial</category>
        
        <category>Hardware</category>
        
        <category>Arduino</category>
        
      </item>
    
      <item>
        <title>Django SQLite DB Cleanup</title>
        <description>&lt;p&gt;To beginners of Django, you may want to play with the sqlite db configuration commands before you actually implement something related to your project. The cleanup afterwards may be harmful due to the lack of clear instructions found online, and many cleanup should be done manually. Some useful commands and solutions to weird issues will be addressed.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4&gt;DB Commands&lt;/h4&gt;

&lt;h6&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.10/topics/migrations/&quot;&gt;Migrations&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;&lt;code&gt;python manage.py makemigrations&lt;/code&gt;: creating new migrations based on the changes you have made to your models&lt;br&gt;
&lt;code&gt;python manage.py migrate&lt;/code&gt;: applying &amp;amp; unapplying migrations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Issues

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9373871/django-migrate-table-forum-user-already-exists&quot;&gt;table not exists errors&lt;/a&gt; occur

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;python manage.py migrate --fake&lt;/code&gt; instead&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21457563/operationalerror-no-such-column&quot;&gt;column not exists errors&lt;/a&gt; occur

&lt;ul&gt;
&lt;li&gt;Probably due to schema changes not synced with DB tables; check schema with &lt;code&gt;python manage.py inspectdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suggest cleaning up the entire database in the following section&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;Clean Up&lt;/h6&gt;

&lt;p&gt;This is only used when you want to clean up the &lt;strong&gt;entire database&lt;/strong&gt;, e.g. you&amp;#39;re playing with your DB and wants to start implementing real things now.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dump all data in the DB: &lt;code&gt;python manage.py flush&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/tutorial/2016/07/26/how-to-reset-migrations.html&quot;&gt;Reset migrations&lt;/a&gt;:&lt;br&gt;
&lt;code&gt;find . -path &amp;quot;*/migrations/*.py&amp;quot; -not -name &amp;quot;__init__.py&amp;quot; -delete&lt;/code&gt;&lt;br&gt;
&lt;code&gt;find . -path &amp;quot;*/migrations/*.pyc&amp;quot;  -delete&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.techiediaries.com/how-to-reset-migrations-in-django-17-18-19-and-110/&quot;&gt;Discard current schema&lt;/a&gt;: &lt;code&gt;rm db.sqlite3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run migrations again&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now all things should be reset.&lt;/p&gt;

&lt;h6&gt;Schema&lt;/h6&gt;

&lt;p&gt;Suppose now you already have a bunch of data and you really don&amp;#39;t wanna dump them away. But after you modify the models, you found that the database schema won&amp;#39;t be updated!  &lt;/p&gt;

&lt;p&gt;Here is the suggested way:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sqlite3 db.sqlite&lt;/code&gt;: enter the sqlite3 shell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; .schema&lt;/code&gt;: check schema&lt;/li&gt;
&lt;li&gt;Verify your schema. If not matched with models, identify the outdated table and proceed with the following steps; otherwise, there must be other problems.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; drop table [table_name]&lt;/code&gt;: drop the table&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; create table [table_name] (...);&lt;/code&gt;: create the table again manually with the updated fields&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://simpleisbetterthancomplex.com/tutorial/2016/07/26/how-to-reset-migrations.html&quot;&gt;Reset migrations&lt;/a&gt;:&lt;br&gt;
&lt;code&gt;find . -path &amp;quot;*/migrations/*.py&amp;quot; -not -name &amp;quot;__init__.py&amp;quot; -delete&lt;/code&gt;&lt;br&gt;
&lt;code&gt;find . -path &amp;quot;*/migrations/*.pyc&amp;quot;  -delete&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Run migrations again&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can check schema with &lt;code&gt;python manage.py inspectdb&lt;/code&gt; again, and the related model should be updated.  &lt;/p&gt;

&lt;p&gt;This might not be the most perfect solution, but I bet there is no other simple way to update the schema without dumping the database all away; at least after all of the research, this is the only effective way I found to solve my problem. &lt;/p&gt;
</description>
        <pubDate>Wed, 29 Mar 2017 00:00:00 +0900</pubDate>
        <link>/blog/tech/django/2017/03/29/django-sqlite-db-cleanup.html</link>
        <guid isPermaLink="true">/blog/tech/django/2017/03/29/django-sqlite-db-cleanup.html</guid>
        
        <category>django</category>
        
        <category>sqlite</category>
        
        
        <category>Blog</category>
        
        <category>Tech</category>
        
        <category>Django</category>
        
      </item>
    
      <item>
        <title>Granny</title>
        <description>&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;400px&quot; height=&quot;400px&quot; src=&quot;https://raw.githubusercontent.com/pyliaorachel/granny/master/img/granny-icon.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pyliaorachel/granny&quot;&gt;Granny&lt;/a&gt; is an app aimed at helping people to understand their emotions without having to overcome many difficulties when trying to find an assistant. You can easily open the app and talk to Granny, and Granny will respond with a face reflective of your emotions. Emotion history will also be kepted as a diary &lt;em&gt;(not yet implemented)&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Details can be found &lt;a href=&quot;https://devpost.com/software/granny&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img width=&quot;245px&quot; height=&quot;416px&quot; src=&quot;https://raw.githubusercontent.com/pyliaorachel/granny/master/img/happy_granny.gif&quot; /&gt;
&lt;img width=&quot;245px&quot; height=&quot;414px&quot; src=&quot;https://raw.githubusercontent.com/pyliaorachel/granny/master/img/sad_neutral_granny.gif&quot; /&gt;
&lt;img width=&quot;245px&quot; height=&quot;414px&quot; src=&quot;https://raw.githubusercontent.com/pyliaorachel/granny/master/img/surprised_angry_granny.gif&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;React Native&lt;/h2&gt;

&lt;p&gt;This app was created in a hackathon and won us the first prize. It was built on &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt;, which extremely accelerated the development of the app. I strongly recommend this powerful yet easy-to-learn framework for any developers ready to attend a hackathon.&lt;/p&gt;

&lt;p&gt;Some problems encountered with Android development and solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure in &lt;code&gt;android/app/build.bundle&lt;/code&gt;, &lt;code&gt;buildToolsVersion&lt;/code&gt;(in my case, 23.0.1) has the same version as your SDK.&lt;/li&gt;
&lt;li&gt;To enable developer mode on an android device, go to &lt;code&gt;Settings &amp;gt; About Phone &amp;gt; Build Number&lt;/code&gt; and tap on it for 7 times.&lt;/li&gt;
&lt;li&gt;If any error shows up when you open AndroidStudio and is trying to run the app, just follow the instructions to upgrade anything they require.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Emotion API&lt;/h2&gt;

&lt;p&gt;The hackathon was held by Microsoft, and Azure was required in all projects. We chose &lt;a href=&quot;https://dev.projectoxford.ai/docs/services/5639d931ca73072154c1ce89/operations/563b31ea778daf121cc3a5fa&quot;&gt;Emotion API&lt;/a&gt; to capture the emotions from the user&amp;#39;s face. There is a hidden camera (&lt;a href=&quot;https://github.com/lwansbrough/react-native-camera&quot;&gt;react-native-camera&lt;/a&gt;) capturing user&amp;#39;s face every 3-5 seconds and return the scores of 8 emotions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;faceRectangle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;488&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;263&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scores&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;anger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.075572e-13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;contempt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;7.048959e-9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;disgust&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.02152783e-11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;fear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.778957e-14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;happiness&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;neutral&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.31694478e-7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sadness&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.04054263e-12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;surprise&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.92249462e-11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We gather the data for 2 purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Granny changes her face in respond to the user&amp;#39;s emotion.&lt;/li&gt;
&lt;li&gt;The cumulated emotion distribution will be kept as the emotion report.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some problems encountered and solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When calling the API with &lt;code&gt;Content-Type&lt;/code&gt; specifying &lt;code&gt;application/octet&lt;/code&gt;, the required body format remains confusing (see &lt;a href=&quot;http://stackoverflow.com/questions/37900554/microsoft-cognitive-services-uploading-image&quot;&gt;here&lt;/a&gt;). Eventually &lt;a href=&quot;https://github.com/wkh237/react-native-fetch-blob&quot;&gt;react-native-fetch-blob&lt;/a&gt; saved my life. Here&amp;#39;s the code snippet:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;RNFetchBlob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://westus.api.cognitive.microsoft.com/emotion/v1.0/recognize'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'Ocp-Apim-Subscription-Key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/octet-stream'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JUST.REMEMBER.TO.TURN.ON.YOUR.PHONE&amp;#39;S.INTERNET.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;User Speech End Detection&lt;/h2&gt;

&lt;p&gt;Although we could simply make up a script and set timeout to continue to the next question for demo purpose, I strongly felt that it would not be amazing at all if everything were fake. Hence I came up with a detection method to detect when the user finishes speaking:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Record background sound amplitude (averaging the first 10 second sampling data).&lt;/li&gt;
&lt;li&gt;Retrieve the audio stream every 1 second, look for 3 consecutive seconds when the amplitude is less than the background (with some scaling).&lt;/li&gt;
&lt;li&gt;If so, go to next question.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first problem is that we couldn&amp;#39;t find a package that fit our need to retrieve the audio stream and the amplitudes. We decided to use &lt;a href=&quot;https://github.com/jsierles/react-native-audio&quot;&gt;react-native-audio&lt;/a&gt; and start audio recording while saving the file to &lt;code&gt;/dev/null&lt;/code&gt;. We can now register a listener for &lt;code&gt;onProgress&lt;/code&gt;, which triggers the callback about every 1 second. The only field returned is &lt;code&gt;currentTime&lt;/code&gt; though, so we modified the package itself to actually return &lt;code&gt;maxAmplitude&lt;/code&gt; as well (see &lt;a href=&quot;https://github.com/pyliaorachel/granny&quot;&gt;github&lt;/a&gt; for the line of code I added. Boom! It&amp;#39;s working!&lt;/p&gt;

&lt;p&gt;Another problem is that &lt;a href=&quot;https://github.com/jsierles/react-native-audio/issues/111&quot;&gt;&lt;code&gt;onProgress&lt;/code&gt; seems not well supported on Android devices&lt;/a&gt;. Use &lt;code&gt;DeviceEventEmitter&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Lastly, remember to turn off the camera&amp;#39;s capture sounds!&lt;/p&gt;

&lt;h4&gt;Some Mysterious Problems (and Probably Solutions)&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Some mysterious sound is coming out every 2-6 seconds when the user is talking, and I am not quite sure which of the packages causes this. This makes detecting whether the user has finished speaking or not troublesome because the noise produces quite a high amplitude. I doubt it to be caused by react-native-camera, but no evidence so far, and the problem remains unsolved.&lt;/li&gt;
&lt;li&gt;According to &lt;a href=&quot;https://github.com/facebook/react-native/issues/2481&quot;&gt;this&lt;/a&gt;, no dynamic strings are allowed in &lt;code&gt;Image&lt;/code&gt; source. Require all the images first and alternate between them.&lt;/li&gt;
&lt;li&gt;When I was importing and using color constants (in &lt;code&gt;src/utils/colors.js&lt;/code&gt;), &lt;code&gt;Object.keys(colors)&lt;/code&gt; also includes a &lt;code&gt;default&lt;/code&gt; field. Don&amp;#39;t know how to avoid this, so I simply discarded it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Other Notes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;After uninstalling packages, remember to unlink all references to them everywhere in your code!&lt;/li&gt;
&lt;li&gt;Animations look slow in debugging mode, so don&amp;#39;t panic, it is better than you thought.&lt;/li&gt;
&lt;li&gt;Learning Android &lt;strong&gt;release build&lt;/strong&gt; is awful! XCode requires only 1 press of button... See &lt;a href=&quot;https://github.com/shyjal/reactnative-android-production&quot;&gt;this tutorial&lt;/a&gt; and try to install the release built app. If you have your debug app (or previous version of released app) on your phone, remember to uninstall it by running &lt;code&gt;adb uninstall [package name]&lt;/code&gt; first (see &lt;a href=&quot;http://stackoverflow.com/questions/26794862/failure-install-failed-update-incompatible-even-if-app-appears-to-not-be-insta&quot;&gt;this&lt;/a&gt;)! For example, my case would be &lt;code&gt;adb uninstall com.granny&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 +0900</pubDate>
        <link>/project/app/2017/01/23/granny.html</link>
        <guid isPermaLink="true">/project/app/2017/01/23/granny.html</guid>
        
        <category>react-native</category>
        
        <category>azure</category>
        
        <category>emotion-api</category>
        
        
        <category>Project</category>
        
        <category>App</category>
        
      </item>
    
      <item>
        <title>Battleship AI</title>
        <description>&lt;p align=&quot;center&quot;&gt;&lt;img width=&quot;600px&quot; height=&quot;300px&quot; src=&quot;http://vignette4.wikia.nocookie.net/habbo/images/9/9d/Battleship_Game.png/revision/latest?cb=20120731170300&amp;path-prefix=en&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pyliaorachel/battleship-ai&quot;&gt;Battleship&lt;/a&gt; is an AI project for identifying battleships hidden in the map given the information of how many targets there are in each row and column.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Battleship Introduction&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;Battleship Puzzle&lt;/strong&gt; is a board of size &lt;code&gt;n * n&lt;/code&gt;, with numbers along each row and column indicating the number of grids in this row or column that is occupied by a ship. &lt;/p&gt;

&lt;p&gt;The number of ships of each size is given. Find a placement of the given battleships in the board that matches the number along the columns and rows.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# Sample Problem    # Input

  1 3 2 2             ships = [0,1,2,1]       // 1 ship of size 1, 2 ships of size 2, etc.
2 ? ? ? ?             row_targets = [2,1,2,3] // 2 ships occupy row 0, 1 ship occupies row 1, etc.
1 ? ? ? ?             col_targets = [1,3,2,2] // 1 ship occupies column 0, 3 ships occupy row 2, etc.
2 ? ? ? ?
3 ? ? ? ?

# Sample Solution

0 0 2 2              # 2 2 represents a ship of size 2 in left-right direction
0 2 0 0
0 2 0 1
3 3 3 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this project, the problem is modeled into a &lt;a href=&quot;https://en.wikipedia.org/wiki/Constraint_satisfaction_problem&quot;&gt;Constraint Satisfaction Problem (CSP)&lt;/a&gt;, which is solved by the framework provided in class. How do we design the CSP model to suit the problems&amp;#39; need?&lt;/p&gt;

&lt;p&gt;We came up with 3 models, each having its advantages and limitations. Below, how we came up with the models will be described; for more details, e.g. how the state variables/variable domains/constraints are defined, they are well-written in our &lt;a href=&quot;https://github.com/pyliaorachel/battleship-ai/blob/master/csc384-project.pdf&quot;&gt;report&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;CSP Models&lt;/h2&gt;

&lt;h4&gt;Model 2 - Pure CSP&lt;/h4&gt;

&lt;p&gt;Let me present model 2 first, since this was the first one we came up with. The thought was pretty naive - model each grid on board into a variable, where the variable domain values are integers of any valid ship length. Running the framework should solve the problem well.&lt;/p&gt;

&lt;p&gt;A serious problem came up: it was not trivial to separate between ships of the same size in contact with each other. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;0 0 3 0
3 3 3 3
0 0 3 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is not valid. How to tell though?&lt;/p&gt;

&lt;p&gt;We decided to make the domain value look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;(ship_id,ship_length) e.g. (0,3) =&amp;gt; the 0th ship of size 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to uniquely identify each ship of the same length. Now the separation problem could be solved.&lt;/p&gt;

&lt;p&gt;Some other limitations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When creating constraints, the constraint scope includes &lt;strong&gt;all variables on board&lt;/strong&gt; to check if ship numbers are consistent with the given input. The large domain hurts the constraint construction time.&lt;/li&gt;
&lt;li&gt;The method is totally not clever - it wastes a lot of time assigning values to neighbor variables that can&amp;#39;t even form a complete ship!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence model 1 is created.&lt;/p&gt;

&lt;h4&gt;Model 1 - CSP + Custom Backtracking Search&lt;/h4&gt;

&lt;p&gt;The key point is we want to assign &lt;strong&gt;a ship&lt;/strong&gt; at a time instead of &lt;strong&gt;a grid&lt;/strong&gt;. To achieve this, we had to modify the framework a bit and design our own backtracking search (see &lt;a href=&quot;https://github.com/pyliaorachel/battleship-ai/blob/master/battleship_BT.py&quot;&gt;battleship_BT.py&lt;/a&gt;). The backtrack steps are as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;Step 1. Assign a variable (say grid x) with ship size l. The assignments are in top-left to bottom-right direction.
Step 2. Assign all variables starting from grid x towards the right until a ship of size l is formed.
Step 3. Keep going until failure and backtrack to grid x.
Step 4. Assign all variables starting from grid x towards the bottom until a ship of size l is formed.
Step 5. Keep going. If backtrack, assign a ship of different sizes (depends on value ordering heuristic).
Step 6. Valid assignment found. Solved.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach significantly sped up our program by avoiding pointless assignments during progress. The construction time was also reduced since we don&amp;#39;t need a constraint with scope including all variables now! But some drawbacks can still be seen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Writing the customized backtrack search was error-prone. We had to manually assign values to the required variables, reverse the assignments, change directions, check boundaries, etc.&lt;/li&gt;
&lt;li&gt;Variable ordering heuristics seem to have no power in this model, since the assignment must go in a certain direction, in our case, from top-left to bottom-right.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Model 3 - Pure CSP&lt;/h4&gt;

&lt;p&gt;Although we were pretty happy with the performance of model 2, we still wanted to have a model that was pure CSP (i.e. didn&amp;#39;t require modifying the CSP framework) but was more clever than model 2.&lt;/p&gt;

&lt;p&gt;We made some changes in the variable definition - a variable now represents &lt;strong&gt;a ship&lt;/strong&gt; instead of &lt;strong&gt;a grid&lt;/strong&gt; in hope of avoiding the useless assignment problem. Multiple ship variables of different sizes and in different directions might overlap on the same grid, and the number of variables significantly grew.&lt;/p&gt;

&lt;p&gt;The result was that since the space requirement grew, we got stuck in model construction! The performance in backtracking was believed to be improved though.&lt;/p&gt;

&lt;h3&gt;Comparison&lt;/h3&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align: center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Model 1&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Model 2&lt;/th&gt;
&lt;th style=&quot;text-align: left&quot;&gt;Model 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Type&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;CSP + Search&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;CSP&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;CSP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Runtime&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Fast. Fast fast.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Slow. Stuck in BT search.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Slow. Stuck in model construction.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Space&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Exponential.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Exponential. Also exponentially larger than model 1.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Exponential. Even larger than model 2.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Advantage&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Efficiency.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Easy to implement.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Avoids useless assignments as in model 2 and improves efficiency.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center&quot;&gt;Drawback&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;1. Customizing BT search is error-prone.&lt;br /&gt;2. Variable ordering heuristics are useless.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;1. Takes time finding satisfying tuples for each constraint due to large scope and domain.&lt;br /&gt;2. Many useless assignments since neighbor variable assignments may not even form a legal ship.&lt;/td&gt;
&lt;td style=&quot;text-align: left&quot;&gt;Takes more time than model 2 forming satisfying tuples for each constraint due to big scope and many constraints.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;Playing with Battleship-AI&lt;/h2&gt;

&lt;p&gt;Feel free to follow the instructions &lt;a href=&quot;https://github.com/pyliaorachel/battleship-ai&quot;&gt;here&lt;/a&gt; and find out the battleship placements of your peer!&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 +0900</pubDate>
        <link>/project/ai/2016/12/06/battleship-ai.html</link>
        <guid isPermaLink="true">/project/ai/2016/12/06/battleship-ai.html</guid>
        
        <category>csp</category>
        
        <category>ai</category>
        
        
        <category>Project</category>
        
        <category>AI</category>
        
      </item>
    
      <item>
        <title>Serverside Swift</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Basics

&lt;ol&gt;
&lt;li&gt;Terminologies&lt;/li&gt;
&lt;li&gt;Commands&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Images

&lt;ol&gt;
&lt;li&gt;Image Types&lt;/li&gt;
&lt;li&gt;Create Images&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Compose

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Application&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Create Swift Package&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;swift package init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;swift build&lt;/code&gt;&lt;br&gt;
&lt;code&gt;swift package generate-xcodeproj&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Package.swift&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;name: name of package
targets: binary files
dependencies: [
  .Package(url: &quot;url&quot;, majorVersion: version, minor: version)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Swift Basics&lt;/h2&gt;

&lt;h5&gt;Strongly-Typed&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;var myVar = &amp;quot;string&amp;quot;&lt;/code&gt; or &lt;code&gt;var myVar: String&lt;/code&gt;&lt;br&gt;
&lt;code&gt;var myInt = Int(myVar)&lt;/code&gt; or &lt;code&gt;var myInt = (myVar as NSString).integerValue&lt;/code&gt;  &lt;/p&gt;

&lt;h5&gt;Constants &amp;amp; Variables&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;let const = value&lt;/code&gt; vs &lt;code&gt;var const = value&lt;/code&gt;&lt;/p&gt;

&lt;h5&gt;Class&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// unnamed parameter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myStaticFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// named parameter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;myStaticFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Building Swift Applicstions&lt;/h2&gt;

&lt;h4&gt;Targets&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Library&lt;/li&gt;
&lt;li&gt;Executable (terminal-like icon)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Settings&lt;/h4&gt;

&lt;p&gt;Target &amp;gt; Edit Scheme &amp;gt; Run &amp;gt; Options &amp;gt; Use custom working directory: [project-directory]&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2016 00:00:00 +0900</pubDate>
        <link>/blog/notes/swift/2016/11/24/serverside-swift.html</link>
        <guid isPermaLink="true">/blog/notes/swift/2016/11/24/serverside-swift.html</guid>
        
        <category>swift</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>ReactJS Data Visualization Libraries in a Hack Night</title>
        <description>&lt;p&gt;At the hackathon last night, we were given a bunch of advertising data to work with so that data can be more understandable. I experimented with several React data visualization libraries, out of which I couldn&amp;#39;t really find a perfect one. I will share the experience working with the libraries, and what pros and cons I found.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;All versions of implementation and final demo can be found &lt;a href=&quot;https://github.com/pyliaorachel/hack-with-ix/tree/master&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically, below is just some subjective observations in a hack night, so there may be many mistakes in the description. I do appreciate any corrections!&lt;/p&gt;

&lt;h3&gt;react-chartjs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-chartjs&quot;&gt;react-chartjs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pyliaorachel/hack-with-ix/blob/demo/ui/src/assets/react-chartjs.png?raw=true&quot; alt=&quot;react-chartjs&quot;&gt;&lt;/p&gt;

&lt;p&gt;The main problem is in its documentation, which seems to be fancy but are actually including too many information which is loosely distributed throughout the entire doc.&lt;/p&gt;

&lt;p&gt;Especially the &lt;code&gt;options&lt;/code&gt;, which determines the settings, style, scale, and all other important stuffs, are really messy and not working as expected. I searched through many examples but simply cannot get rid of the gray color in my chart. Discarded it because nobody wants such a chart with not-very-appealing look.&lt;/p&gt;

&lt;p&gt;But I really like that I can work out a formatted x-axis display value. This should be a basic functionality, but surprisingly not many libraries get this well.&lt;/p&gt;

&lt;h5&gt;Data Parsing&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;labels&lt;/code&gt; as x-axis or categories, &lt;code&gt;data&lt;/code&gt; in &lt;code&gt;datasets&lt;/code&gt; as y-axis or values.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// other options&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Purple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yellow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Pros&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;labels&lt;/code&gt; to represent x-axis, which is great that I can customize&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Cons&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Not providing a clear react version documentation but uses &lt;a href=&quot;http://www.chartjs.org/docs/&quot;&gt;chartjs&lt;/a&gt;&amp;#39;s instead, which I don&amp;#39;t really like because of the extensive information&lt;/li&gt;
&lt;li&gt;Demonstration page not clear with how the data look like&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t know why, but some of the &lt;code&gt;options&lt;/code&gt; are not working, and I can&amp;#39;t do the styling because of this&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;react-d3&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/esbullington/react-d3&quot;&gt;react-d3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pyliaorachel/hack-with-ix/blob/demo/ui/src/assets/react-d3.png?raw=true&quot; alt=&quot;react-d3&quot;&gt;&lt;/p&gt;

&lt;p&gt;The main problem is in data parsing.&lt;/p&gt;

&lt;p&gt;You need to go through the whole data and explicitly parse out the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in a &lt;code&gt;values&lt;/code&gt; array, which is most commonly done by simply setting the &lt;code&gt;field&lt;/code&gt; key in other libraries. This can be helpful if you want even more flexibility, but this is seldom the case.&lt;/p&gt;

&lt;p&gt;And again, where can I easily find the styling instructions? Miserable.&lt;/p&gt;

&lt;h5&gt;Data Parsing&lt;/h5&gt;

&lt;p&gt;Parse points as &lt;code&gt;x-y&lt;/code&gt; pairs in a &lt;code&gt;values&lt;/code&gt; array for coordinate charts.&lt;br&gt;
Parse categories as &lt;code&gt;label&lt;/code&gt; and values as &lt;code&gt;value&lt;/code&gt; for category charts.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lineData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;series1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strokeWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strokeDashArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5,5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;series2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pieData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Margarita'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;55.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;25.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Pros&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Nice demonstration page, simple and clear&lt;/li&gt;
&lt;li&gt;Parse the x/y coordinates ourselves, which can be more flexible (but also a con)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Cons&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The styling instructions are somehow hidden deep in the documentation&lt;/li&gt;
&lt;li&gt;Need to parse the x/y coordinates ourselves, which is more tedious (but also a pro)&lt;/li&gt;
&lt;li&gt;Customize displayed x-/y-axis is not flexible enough (only found time on x-axis to be formattable, but the instructions are not clear)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;react-d3-basic&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/react-d3/react-d3-basic&quot;&gt;react-d3-basic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pyliaorachel/hack-with-ix/blob/demo/ui/src/assets/react-d3-basic.png?raw=true&quot; alt=&quot;react-d3-basic&quot;&gt;&lt;/p&gt;

&lt;p&gt;To be honest, I choose this as the final working version simply because I KNOW HOW TO STYLE IT. The documentation is the nice ever.&lt;/p&gt;

&lt;p&gt;The main problem is still in data parsing and non-customizable x-axis display value.&lt;/p&gt;

&lt;p&gt;Although the doc is nice, but the data are not especially shown, so I have to look for the &lt;code&gt;.csv&lt;/code&gt; files on github and found some missing. Not a big problem though, but a problem to hackers in hackathons.&lt;/p&gt;

&lt;p&gt;For the x-axis display values, it provides an &lt;code&gt;x&lt;/code&gt; function for you to map. But they are not actually intended for you to map displayed values but only actual values. So if you want the function to return a string representation of a date, it fails because only number values are allowed.&lt;/p&gt;

&lt;p&gt;And the bar-type charts yelled to me miserable errors for a missing &lt;code&gt;bandwidth&lt;/code&gt; function deep in the &lt;code&gt;chartjs&lt;/code&gt; package, probably because I used the bar charts to build some streaming charts. So be careful when implementing them.&lt;/p&gt;

&lt;h5&gt;Data Parsing&lt;/h5&gt;

&lt;p&gt;Use &lt;code&gt;field&lt;/code&gt; for the y-axis filter. Argument in &lt;code&gt;x&lt;/code&gt; function is the data object itself, so be sure the datum is parsed in a way that have both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;// sample data
[
  {
    total: 1,
    incineration: 1,
    garbageBury: 1,
    month: 1,
  },
  {
    total: 2,
    incineration: 2,
    garbageBury: 2,
    month: 2,
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartSeries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chartSeries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'total'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Total'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'incineration'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Incineration'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'garbageBury'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Garbage Bury'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Pros&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Nice documentation, simple and clear&lt;/li&gt;
&lt;li&gt;Easy to style&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Cons&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Need more examples on how to parse the data for different charts&lt;/li&gt;
&lt;li&gt;Customized x-/y-axis is not flexible enough&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0900</pubDate>
        <link>/blog/tech/reactjs/2016/11/21/reactjs-data-visualization-libraries-in-a-hack-night.html</link>
        <guid isPermaLink="true">/blog/tech/reactjs/2016/11/21/reactjs-data-visualization-libraries-in-a-hack-night.html</guid>
        
        <category>react</category>
        
        <category>react-chartjs</category>
        
        <category>react-d3</category>
        
        <category>react-d3-basic</category>
        
        <category>data visualization</category>
        
        
        <category>Blog</category>
        
        <category>Tech</category>
        
        <category>ReactJS</category>
        
      </item>
    
      <item>
        <title>Docker Beginner</title>
        <description>&lt;h2&gt;Content&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Basics

&lt;ol&gt;
&lt;li&gt;Terminologies&lt;/li&gt;
&lt;li&gt;Commands&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Images

&lt;ol&gt;
&lt;li&gt;Image Types&lt;/li&gt;
&lt;li&gt;Create Images&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Docker Compose

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run Application&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;hr&gt;

&lt;h2&gt;Basics&lt;/h2&gt;

&lt;h3&gt;Terminologies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Images&lt;/strong&gt;: the &lt;strong&gt;file system and configuration of an application&lt;/strong&gt; used to &lt;strong&gt;create containers&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker inspect image-name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: &lt;strong&gt;running instances of Docker images&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Run the actual applications; includes an application and all of its dependencies &lt;/li&gt;
&lt;li&gt;Share the kernel with other containers&lt;/li&gt;
&lt;li&gt;Run as an isolated process in user space on the host OS &lt;/li&gt;
&lt;li&gt;A container created by &lt;code&gt;docker run&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker daemon&lt;/strong&gt;: the background service running on the host that &lt;strong&gt;manages building, running and distributing Docker containers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker client&lt;/strong&gt;: the command line tool that allows the user to interact with the Docker daemon&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;: a registry of Docker images&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Commands&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker login&lt;/code&gt; login to docker hub&lt;br&gt;
&lt;code&gt;docker ps&lt;/code&gt; list current running containers&lt;br&gt;
    - &lt;code&gt;docker ps -a&lt;/code&gt; list containers ran before&lt;br&gt;
&lt;code&gt;docker images&lt;/code&gt; list images&lt;br&gt;
&lt;code&gt;docker pull image-name&lt;/code&gt; pull image from hub&lt;br&gt;
    - &lt;code&gt;image-name:version&lt;/code&gt; specify version e.g. &lt;code&gt;ubuntu:12.04&lt;/code&gt;, &lt;code&gt;ubuntu:latest&lt;/code&gt;
&lt;code&gt;docker push USERNAME/image-name&lt;/code&gt; push image to hub&lt;br&gt;
&lt;code&gt;docker run image-name [command]&lt;/code&gt; executes commands in container&lt;br&gt;
    - &lt;code&gt;docker pull&lt;/code&gt; if image not exists
    - &lt;code&gt;-it&lt;/code&gt; iterative mode; will not exit container&lt;br&gt;
    - &lt;code&gt;-d&lt;/code&gt; detached mode; detach running container from terminal
    - &lt;code&gt;-P&lt;/code&gt; publish all the exposed container ports to random ports on the Docker host
    - &lt;code&gt;-p&lt;/code&gt; specify port number e.g. &lt;code&gt;-p 8888:80&lt;/code&gt; link 8888 on container to 80 on host
    - &lt;code&gt;-e&lt;/code&gt; pass environment variables
        - e.g. &lt;code&gt;-e AUTHOR=&amp;quot;name&amp;quot;&lt;/code&gt;
    - &lt;code&gt;--name&lt;/code&gt; specify container name
&lt;code&gt;docker stop container-name&lt;/code&gt; stop running container&lt;br&gt;
&lt;code&gt;docker rm container1-name container2-name ...&lt;/code&gt; remove containers&lt;br&gt;
    - &lt;code&gt;-f&lt;/code&gt; remove running containers 
&lt;code&gt;docker port container-name&lt;/code&gt; port of running container
&lt;code&gt;docker search image-name&lt;/code&gt; search for images  &lt;/p&gt;

&lt;h2&gt;Docker Images&lt;/h2&gt;

&lt;h3&gt;Image Types&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Base images v.s. child images

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base image&lt;/strong&gt;: no parent images, usually images with an OS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Child image&lt;/strong&gt;: build on base images and add additional functionality&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Official images v.s. user images

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Official image&lt;/strong&gt;: no prefix&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User image&lt;/strong&gt;: &lt;code&gt;user/image-name&lt;/code&gt;; based on &lt;em&gt;base image&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Create Images&lt;/h3&gt;

&lt;h4&gt;Steps&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create an app&lt;/li&gt;
&lt;li&gt;Write a Dockerfile&lt;/li&gt;
&lt;li&gt;Build the image&lt;/li&gt;
&lt;li&gt;Run your image&lt;/li&gt;
&lt;li&gt;Dockerfile commands summary&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;List of commands the Docker daemon calls while creating an image.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Docker image to run from&lt;/li&gt;
&lt;li&gt;Location of your project code&lt;/li&gt;
&lt;li&gt;Dependencies&lt;/li&gt;
&lt;li&gt;Commands to run at start-up&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;# specify base image
FROM alpine:latest # username/imagename:version

# copying files &amp;amp; installing dependencies
RUN apk add --update py-pip # install Python pip package to the alpine linux distribution # RUN add new layers

# install required Python packages &amp;amp; copy files
COPY requirements.txt /usr/src/app/
RUN pip install --no-cache-dir -r /usr/src/app/requirements.txt
COPY app.py /usr/src/app/
COPY templates/index.html /usr/src/app/templates/

# specify port number
EXPOSE 5000

# run application; one CMD per Dockerfile/Image
CMD [&quot;python&quot;, &quot;/usr/src/app/app.py&quot;] # which command to run by default when started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Build Images&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;docker build -t &amp;lt;USERNAME&amp;gt;/appname [path-to-dockerfile]&lt;/code&gt;&lt;br&gt;
    - &lt;code&gt;-t&lt;/code&gt; optional tag name&lt;/p&gt;

&lt;h2&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;Define &amp;amp; run multi-container apps.&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Describe containers &amp;amp; volumes you want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&quot;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./vote&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python app.py&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./vote:/app&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5000:80&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;front-tier&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./result&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodemon --debug server.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./result:/app&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5001:80&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5858:5858&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;front-tier&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./worker&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis:alpine&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;postgres:9.4&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;db-data:/var/lib/postgresql/data&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;db-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;front-tier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;back-tier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Networks&lt;/strong&gt;: containers can communicate with others in the same network&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Run Application&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt; start all containers in &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;br&gt;
    - &lt;code&gt;-d&lt;/code&gt; run in daemon mode in background&lt;/p&gt;

&lt;p&gt;Then build &amp;amp; push to hub.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0900</pubDate>
        <link>/blog/notes/docker/2016/11/17/docker-beginner.html</link>
        <guid isPermaLink="true">/blog/notes/docker/2016/11/17/docker-beginner.html</guid>
        
        <category>docker</category>
        
        
        <category>Blog</category>
        
        <category>Notes</category>
        
        <category>Docker</category>
        
      </item>
    
  </channel>
</rss>
